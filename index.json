[{"categories":["esp32"],"contents":"6軸センサーを使ってM5stamp picoの機能確認 M5stamp picoの機能確認です。よく使うI2Cですが、手持ちで空いてるセンサーが6軸センサーのMPU6050です。 センサー値が出力されればOKとしましょう。\n確認準備 配線 ブレッドボードを使って配線します。MPU6050の電源は、3.3V駆動です。あとは、GNDとI2Cの2線の計4線を接続すれば完了です。\n\r\rMPU6050には空き端子ありますが、オープンで問題ありません。 \r\rソフトウェア Arduinoにて記述します。参考リンク1のサンプルコードをそのままコピーしました。そのままで問題ありません。開発環境は、VScode+Plathomeioです。\n動作確認 ターミナルに数値が表示されていることを確認して、ArduinoIDEのシリアルプロッターで値をグラフにして可視化します。3軸の加速度とジャイロ情報がボードの動きに合わせて変化していることが確認できます。\n  まとめ M5stamp picoの機能確認として、I2C接続した6軸センサーMPU6050の値を読み出しました。 リアルタイムにセンサー値を読み出せることを確認しました。\n参考リンク\n  【Arduino】MPU6050とI2C通信して、加速度とジャイロのデータを取得\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://hkaji.github.io/blog/esp32/04_pico_mpu6050/","tags":["M5stamp pico","mpu6050","Arduino"],"title":"M5stamp pico I2C確認...6軸センサー"},{"categories":["esp32"],"contents":"M5stamp pico serial.print()出力されない問題 M5stamp picoの機能確認をしていたのですが、setupルーチンのSerial.print()が出力されない問題に悩んでいました。シリアルの速度などの設定問題であれば、loopルーチンも出力されないので解決しやすいのですが。\nsetup内は出力されないけれどもloop内では出力されるという問題の解決です。\n問題をコードで整理する 以下のコードをmakeして動かすと出力は以下のとおりです。\n1 2 3 4 5 6 7 8 9 10 11 12 13  #include \u0026lt;M5Atom.h\u0026gt; void setup() { M5.begin(); Serial.begin(115200); Serial.print(\u0026#34;Setup routine\\n\u0026#34;); } void loop() { Serial.print(\u0026#34;Loop routine\\n\u0026#34;); delay(1000); }   1 2 3 4 5 6 7 8 9  --- Available filters and text transformations: colorize, debug, default, direct, esp32_exception_decoder, hexlify, log2file, nocontrol, printable, send_on_enter, time --- More details at https://bit.ly/pio-monitor-filters --- Miniterm on COM5 115200,8,N,1 --- --- Quit: Ctrl+C | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H --- Loop routine Loop routine Loop routine Loop routine   setupルーチン内のSerial.print()が出力されません。 Syntax的にも問題なく、バイナリーもちゃんと作成され書き込みも問題ありません。\n解決方法は、ちょっとした呪文でした コードに以下の一行を追加すると解決しました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  #include \u0026lt;M5Atom.h\u0026gt; void setup() { M5.begin(); Serial.begin(115200); delay(8000); # \u0026lt;-----　この行を追加 Serial.print(\u0026#34;Setup routine\\n\u0026#34;); } void loop() { Serial.print(\u0026#34;Loop routine\\n\u0026#34;); delay(1000); }   出力も期待通りです。setup内のSerial.print()が出力されています。\n1 2 3 4 5 6 7 8 9  --- Available filters and text transformations: colorize, debug, default, direct, esp32_exception_decoder, hexlify, log2file, nocontrol, printable, send_on_enter, time --- More details at https://bit.ly/pio-monitor-filters --- Miniterm on COM5 115200,8,N,1 --- --- Quit: Ctrl+C | Menu: Ctrl+T | Help: Ctrl+T followed by Ctrl+H --- Setup routine Loop routine Loop routine Loop routine   考察 これまでM5stack,M5stickC plusでも似たようなコードを動かしましたが、問題なく出力されていました。M5stamp pico固有の問題なのか、このロット固有の問題なのかはわかりません。 PCのシリアルポートとの通信確立に待ち時間の呪文が必要なようです。 delay()の長さは、1000msという説がありましたが、現在の環境では80000ms以上必要なようです。リセットのタイミングで出力されない場合もあるので、さらなる呪文が必要なのかもしれません。\n先人のM5stampお試しblog等を眺めてたところ長いdelay()を挿入している方を見つけて、試してみた結果です。なぜこの呪文が必要かなのかはわかりません。Serial.print()に戻り値があれば、もう少し調べられますがないようです。\nまとめ M5stamp picoのSerial.print()表示されない問題は解決しました。なぜこの呪文が必要なのかはわかりません。\n","permalink":"https://hkaji.github.io/blog/esp32/03_pico_serial/","tags":["M5stamp pico","Arduino"],"title":"M5stamp pico Serial.print()の呪文"},{"categories":["esp32"],"contents":"node exporter化して動かしてみる M5stamp picoですが、小型のesp32を搭載ということでこれまで作成したコード等が 簡単に流用できます。WiFiを含めて連続運用可能なのか調べるためにnode exporter化して しばらく連続運用したいと思います。\nnode exporterのArduinoコード 現在M5stack+温度湿度センサーで動かしているので、そのコードを流用します。温度センサーの手持ちがないので、その部分は削除します。\n起動して、WWWブラウザーからmetricsを読み取るとちゃんと表示されました。小さなマイコンですが、ちゃんとWWWサーバーとして機能しています。 \r\rprometheusからスクレーピングする 時系列DBの設定ファイルprometheus.ymlに、以下の項目を追加して再起動します。 スクレーピング間隔は、20sにしました。\n1 2 3 4 5  - job_name:\u0026#34;exporter_pico\u0026#34;scrape_interval:20smetrics_path:\u0026#34;/metrics\u0026#34;static_configs:- targets:[\u0026#34;pico_IP_address:80\u0026#34;]  grafanaにて確認する prometheusに集めたデータをgrafanaにて可視化して確認します。長時間動いているM5stackのdashboardに自動的に重ねあわされてました。esp32内部の温度やuptimeを確認すると問題なくデータが時系列DBに格納されていることが確認できました。 グラフの黄線がM5stackのデータ、緑線がM5stampのデータです。\n\r\rSerial出力が確認できない VScode+plathomioな環境でバイナリーの作成をしてます。言語は、Arduinoを使っています。 setupルーチンやsetupルーチンから呼び出された関数内でSerial.printしてもターミナルになぜか表示されません。ただし、処理は実行されています。この謎は、引き続き確認したいと思います。シリアルのスピードを変更しても症状は改善しません。\nまとめ M5stamp picoの機能確認のためNode exporterを動作させて、時系列DBから20s間隔でデータをスクレーピングしました。とくに問題なく動作することを確認しました。\n","permalink":"https://hkaji.github.io/blog/esp32/02_pico_exporter/","tags":["M5stamp pico","prometheus","Arduino"],"title":"M5stamp picoをnode exporterに"},{"categories":["esp32"],"contents":"M5stamp pico購入 M5シリーズに小型のeps32を使ったM5stampというシリーズが昨年発売されました。 発売されたのに気づいたのはつい最近です。\n早速購入しました。M5stack Atomをさらに小型にしたタイプとのことなので、 開発環境などはこれまでのとおりVScode+plathomioでいけそうです。 \r\rこれまでのと比べると半分程度の大きさです。シリアル接続機能がないのとデバイスが小さくなったので その分小さくなった感じです。\n開発環境VScodeの設定 VScode+plathomeio環境だとまだM5stampは、設定jsonファイルが更新されていません。 参考リンクを見ながら手動追加1します。M5Atom関連のファイルは入ってます。 M5Atomとピン配置が違うだけのようです。\nオンボードのLEDが3色タイプなのでFastLEDをライブラリーに追加する必要があります。 これは公式GitHubページ2にも書いてあります。\nLチカしてみる 基本のLチカですが、3色LEDなのでGPIOのオンオフでは点灯しません。 FastLEDもしくはAdafruit_neopixelなどのライブラリーを追加する必要があります。 コードは、難しくはありません。色を指定すると256^3種類発色します。 サンプルコードに1色追加しました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  #include \u0026#34;Arduino.h\u0026#34;#include \u0026lt;FastLED.h\u0026gt; // How many leds in your strip? #define NUM_LEDS 1 #define DATA_PIN 27  // Define the array of leds CRGB leds[NUM_LEDS]; /* After STAMP-PICO is started or reset the program in the setUp () function will be run, and this part will only be run once. */ void setup() { FastLED.addLeds\u0026lt;SK6812, DATA_PIN, RGB\u0026gt;(leds, NUM_LEDS); // GRB ordering is typical } /* After the program in setup() runs, it runs the program in loop() The loop() function is an infinite loop in which the program runs repeatedly */ void loop() { // Turn the LED on, then pause  leds[0] = 0xf00000; FastLED.show(); delay(500); // Now turn the LED off, then pause  leds[0] = 0x00f000; FastLED.show(); delay(500); // Now turn the LED off, then pause  leds[0] = 0x0000f0; FastLED.show(); delay(500); }   問題なくLチカ確認できました。   まとめ M5stamp picoを購入してLチカまで確認できました。その他の機能も引き続き確認していきたいと思います。\n参考リンク   PlatformIOにM5Stamp Picoのボード定義を追加してみた\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n GitHub m5stack/STAMP-PICO\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://hkaji.github.io/blog/esp32/01_m5stamp_pico/","tags":["M5stamp pico","VScode","Plathomeio","Arduino"],"title":"M5stamp picoをVScodeで動かす"},{"categories":["etc"],"contents":"基板にセンサーを引越します ブレッドボードにて運用中のセンサーです。 \r\rこれを先日完成した基板にセンサーを移動します。\nセンサー類を接続替え ソケットやピンは個別に半田付けします。 念のため、テスターで配線確認しましたが問題ありません。当然ですね。 これで動かない場合は、設計がおかしいです。 センサー類はソケットに刺せはいいだけです。裏表さえ間違えなければ問題ありません。 あとは、esp32からの配線をまとめて接続替えします。 \r\rなぜ動かない USBケーブル接続すれば起動するはず。動きません。はぁーーーー。 再度接続やコネクターのゆるみを確認します。 テスターでエンドエンドの導通確認しましたが問題ありません。\n犯人はこれ esp32のプログラムをi2c_scannerに入れ替えてi2cの状況を確認するとNo dataです。 ちゃんと動いていれば、I2Cデバイスのアドレスが表示されます。\n1  sda=0,scl=0   というエラー表示もあります。I2Cラインのプルアップが足りないのか。 ブレッドボードの時より配線は短くなっているのでそれはないでしょう。\n師匠のアドバイスで「初心」に戻って再度配線を確認しました。 今度はエンドエンドの導通ではなく、各ポイントの電圧を測定します。GNDはすべて0です。 3.3Vラインはマイコン側から確認していくと作成した基板端子で1.5Vほどです。ん。\n配線を確認したら、原因はこいつです。 \r\r見た目にはわかりませんが、内部で断線してます。この線を交換したら、i2c_scannerの表示が3つそれぞれのデバイスアドレスが表示されました。\n動作確認OK esp32プログラムを変更しました。センサーデータをIoTクラウドサービスAmbientへ送信するプログラムを書き込みます。このプログラムは10分毎にAmbientへセンサーデータを送信します。 クラウド上の受信データ問題ありません。 \r\rまとめ 設計した基板へセンサーを引っ越し完了しました。クラウド上に問題なくセンサーデータが送信されていることを確認しました。箱もサイズ違い等あったので、再度作り直したいと思います。\n","permalink":"https://hkaji.github.io/blog/etc/14_sensor/","tags":["kicad6","pcb","sensor circuit"],"title":"基板にセンサーを引越します"},{"categories":["etc"],"contents":"発注した基板が到着しました FusionPCBに発注していた基板が到着しました。前回の時系列を更新します。\n発注から製造の時間的な推移は以下のとおりです。\n   日時 状況     2022/02/26 15:07 発注、PCB審査   2022/02/28 16:00 基板製造開始   2022/03/03 12:14 製造完了、発送   2022/03/10 19:09 日本到着 佐川急便へ受け渡し   2022/03/11 09:25 最寄り営業所へ到着   2022/03/11 10:57 不在持ち帰り   2022/03/12 10:58 配達完了    発注から到着までいちばん安い配送方法にて約2週間です。\nこのような梱包で輸送されてきます。 \r\r開封するとこのようになってます。乾燥材と一緒に基板は減圧パックされています。周りはプチプチで保護されています。 \r\r基板表はこんな感じです。 \r\r基板裏はこんな感じです。 \r\rレジストの色を白に指定したので自称カッコいい基板になりました。シルクもしっかりと印刷されています。表裏2層基板かつ配線も少ないので電気的にもまったく問題ないと思います。 次のステップは、3Dプリンターでこの基板がぴったり収まる箱を作って、センサーボックス化を進めたいと思います。\nまとめ 発注した基板が到着しました。WWW上で発注して約2週間で到着しました。基板制作費が約600円、輸送費が1,800円程度でした。\n参考リンク ","permalink":"https://hkaji.github.io/blog/etc/13_fusionpcb/","tags":["kicad6","pcb"],"title":"Fusionpcbより基板到着しました"},{"categories":["etc"],"contents":"Kicad6で設計した基板を発注します 設計した基板を発注します。国内にも数社基板メーカーありますが、試作数枚でも1万円からな感じです。海外メーカー12345は、お安いですが配送料高いのと配送日数が長めな感じです。趣味の試作基板は、少々時間かかってもお安いのが一番です。今回はFusion pcbへ発注しました。\n発注準備 gerberファイルの準備など まずは、Kicad6で作成した基板データをgarberデータに変換します。 変換するときのオプションは、先人の知恵を探しつつ作成します。 併せてドリルファイルも作成します。 どこかのフォルダーにまとめて出力するとzipでまとめるときに間違いません。\n基板の細かい設定をして、といってもほぼデフォルトでOKです。今回は仕上がりの基板の色を白に変更しただけです。 \r\r支払い準備 支払いは、クレジットカードかpaypalが使えます。直接クレジットカード情報をやり取りしたくなければ事前にpaypalのアカウントを作成して、paypalアカウントにクレジットカード情報を登録しておく必要があります。 \r\rWWW上で発注します 準備時に作成したzipをuploadして各腫設定（ほぼデフォルト）を確認したらカートに入れます。 カートに入れた後支払いへ進みます。支払い完了すると製造がはじまります。\n PCB審査 生産 製造完了  と製造工程は進みます。 \r\r発注から製造の時間的な推移は以下のとおりです。\n   日時 状況     2022/02/26 15:07 発注、PCB審査   2022/02/28 16:00 基板製造開始   2022/03/03 12:14 製造完了、発送   次回記入 日本到着   次回記入 配達完了    今週は、ここまでです。到着と基板の製造具合は次回に。\nまとめ 基板をFusionpcbへ発注しました。CADの使い方を覚えて設計が終われば発注は、そう難しくはありません。はじめてのオリジナル基板到着まで気長に待ってます。\n参考リンク   Fusionpcbプリント基板の製造・実装・設計\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n ALLPCB ALL for Reliable PCB\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n JLCPCB\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n PCBWay\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n ELECROW\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://hkaji.github.io/blog/etc/12_kicad6_pcb/","tags":["kicad6","pcb"],"title":"Kicad6で設計しFusion pcbへ基板発注しました"},{"categories":["www"],"contents":"hugo作成ページのコンタクトフォームについて bloggerからhugo+GitHub pageに移行しましたが、themeデフォルトのまま 使っていたのでコンタクトフォームのページはあるものの動いてませんでした。 知り合いしか見てないのでPVも微々たるもの。わざわざコンタクトフォームに 記入して送ってくれるもの好きな方はいないだろうと勝手に理解して放置してました。\nたまたまもの好きな方からコンタクトフォーム「動いてないよ」とお知らせいただきました。 放置のままなのでそりゃ動かんでしょうと思いつつ。\n修正してようやく入力してもらったフォーム内容がメール送信されるようになりました。\nmethod = \u0026lsquo;post\u0026rsquo; これを何とかしてあげると後はpost先がいい感じに処理してくれるはず。 ググって探すとフリーで使えるところが多数あるようです。 参考リンク1がアカウント作成無しに使えるようです。\nhugo環境では 使用しているthemeは、Liva hugoなので、デフォルトでコンタクトフォームのページがあります。 コンタクトフォームのページはこんな感じです。\nblog/layout/contact/list.htmlの最初の設定状況です。6行目のactionがありません。\n1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;section class=\u0026#34;section-sm pb-0\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row justify-content-center\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-lg-8 text-center\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;mb-4\u0026#34;\u0026gt;Hi Write To Me\u0026lt;/h2\u0026gt; \u0026lt;form action=\u0026#34;#\u0026#34; method=\u0026#34;POST\u0026#34; class=\u0026#34;row\u0026#34;\u0026gt;  \u0026lt;div class=\u0026#34;col-lg-6\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control mb-4\u0026#34; id=\u0026#34;name\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;Your Name\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-lg-6\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; class=\u0026#34;form-control mb-4\u0026#34; id=\u0026#34;email\u0026#34; name=\u0026#34;email\u0026#34; placeholder=\u0026#34;Your Email\u0026#34;\u0026gt; \u0026lt;/div\u0026gt;   formはできているので、postのアクションに参考リンクのURLに送信したいメールアドレスを追加して修正すればいいです。変更後はこのようになります。\n1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;section class=\u0026#34;section-sm pb-0\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row justify-content-center\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-lg-8 text-center\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;mb-4\u0026#34;\u0026gt;Hi Write To Me\u0026lt;/h2\u0026gt; \u0026lt;form action=\u0026#34;https://formsubmit.co/hkaji.blog@gmail.com\u0026#34; method=\u0026#34;POST\u0026#34; class=\u0026#34;row\u0026#34;\u0026gt;  \u0026lt;div class=\u0026#34;col-lg-6\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control mb-4\u0026#34; id=\u0026#34;name\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;Your Name\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-lg-6\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; class=\u0026#34;form-control mb-4\u0026#34; id=\u0026#34;email\u0026#34; name=\u0026#34;email\u0026#34; placeholder=\u0026#34;Your Email\u0026#34;\u0026gt; \u0026lt;/div\u0026gt;   hugoでページを作り直してGitHub Pageにpushします。その後、フォームに入力して送信するとActivation手順とランダムな数字がメールアドレスに送られてきます。\n最後は、このメールアドレスを隠すこともできるようです。送られてくるメールにランダムな数字があるので、それをメールアドレスと入れ替えます。\n1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;section class=\u0026#34;section-sm pb-0\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row justify-content-center\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-lg-8 text-center\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;mb-4\u0026#34;\u0026gt;Hi Write To Me\u0026lt;/h2\u0026gt; \u0026lt;form action=\u0026#34;https://formsubmit.co/random_number from FormSubmit\u0026#34; method=\u0026#34;POST\u0026#34; class=\u0026#34;row\u0026#34;\u0026gt;  \u0026lt;div class=\u0026#34;col-lg-6\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control mb-4\u0026#34; id=\u0026#34;name\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;Your Name\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-lg-6\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; class=\u0026#34;form-control mb-4\u0026#34; id=\u0026#34;email\u0026#34; name=\u0026#34;email\u0026#34; placeholder=\u0026#34;Your Email\u0026#34;\u0026gt; \u0026lt;/div\u0026gt;   手順にしたがってActivationすれば完了です。\n\r\r\r無事コンタクトフォームからメール送信できるようになりました。\nデータの流れを補足する フォーム入力後のデーターの流れを図にしました。図をクリックすると拡大します。 \r\r今回の設定ではform入力された内容を無料外部サービスにpostして、メール送信しています。図中左の箱2つがデータの流れです。ホスティングサービスや自前サーバーにて構成してform actionをmailtoを指定すると自前でMTAを構築設定しないといけません。図中右の箱の流れです。MTAの構築は以前簡単でしたが、最近はSPAMメールの温床になるので簡単ではありません。深みにはまって色々と設定した方やバックエンドのプロを目指す方はご自由にですが、便利な外部サービスを使うと興味が湧く部分に時間を有効に使えます。\nまとめ SSGによって作成したページをホスティングサーバー上で動かすと、バックエンドのことはお任せになります。今どきはバックエンドの機能をいい感じに吸い取ってくれる無料サービスがあります。 商用で利用するのは有料なところが多いですが、個人で少々使うくらいは無料でいけそうです。\nようやくコンタクトフォーム稼働しましたのでご利用ください。といっても、使う人はいないのでしょうね。\n参考リンク   Easy form endpoints for your HTML forms\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://hkaji.github.io/blog/www/05_contact/","tags":["hugo","contact_form"],"title":"放置していたコンタクトフォーム稼働しました"},{"categories":["etc"],"contents":"Kicad6をインストールする Kicadは、オープンソースな電子回路と基板設計CADです。俗にいうEDAツールです。\nKicad更新履歴 5.1.x系から6.0系に更新されました。細部は参考リンクに記載があります。時系列をたどると以下のとおり現在最新版は6.0.2です。ただし6.0.2とWin10は、フリーズ問題が内在しておりまだ改善の余地ありです。とくにpcb editorは、ちょっとイライラします。\n 6.0.0 2021/11/25 6.0.1 2022/1/15 6.0.2 2022/2/13  基板作成手順 ブレッドボードにて運用中のセンサー群を基板化して箱に入れたいと思います。\n\r\r電源ラインとI2C、シリアル配線だけなので穴あき基板に手動半田でも十分作成できますが、CADの練習と基板発注をやってみたいので試してみます。\nEDAツールは、Kicad6.0.2をインストールしました。使い方は、以前の5.1.8系とほぼ同じです。 まずは、手動で配線を読み取ります。\n\r\rKicad6のschematic editorで回路図を書きます。\n\r\r部品番号をつけるためにアノテーションして、パーツ毎にフットプリントを指定します。\npcbエディター 次は基板レイアウトです。pcb editorを起動してネットリストを読み込みます。\n\r\rpcb editorは、途中でやたらとハングアップします。もう少しバージョンアップしないと使い物にならない感じです。こまめにセーブしてフリーズしたら再起動とちょっと面倒です。早く直してほしいところです。ここで各部品の距離を決めながら配置します。外形線も書いて、基板の大きさを確定します。\n自動配線 エクスポートからSpecctra DSNファイルを選択してファイルを書き出します。 freerouterというソフトがあるので、読み込んでAutorouteするといい感じに配線してくれます。 配線多いと時間かかるようですが、今回の基板だと数秒でした。 \r\rベタGND pcb editorに戻って自動配線したファイルを読み込みます。ちゃんと配線されています。 ベタGNDで両面塗りつぶして、シルクをお好きなように書いて基板はほぼ完成です。 \r\r基板完成 ちょっと時間はかかりましたが、ようやくCAD上の設計は完成しました。 \r\rまとめ Kicad6を使って、センサーボックスの基板を作成しました。Kicad5-\u0026gt;6にバージョンアップしましたがWin10版は結構フリーズします。今後の修正を期待します。 次回は、海外基板メーカーに作成を発注したいと思います。\n参考リンク [1^]:Kicad EDA\n","permalink":"https://hkaji.github.io/blog/etc/11_kicad6/","tags":["kicad6"],"title":"Kicad6インストールしました...基板作ります"},{"categories":["etc"],"contents":"プロバイダー変更_宅内配線編 前回、プロバイダー変更をして回線速度が爆速になった件をまとめました。 今回は、屋内配線の変更点についてまとめたものです。\n各装置と回線インターフェイス NTTルータ（PR-400） NTT局舎から光ファイバーをONUで受けて、ルーター機能もあります。WWWの設定画面で各種設定をします。 \r\r簡単なパケットフィルターやポート転送の設定ができます。IPoEとPPPoEの切替もできます。LAN側は、RJ-45コネクタが4ポート出ていて、設定画面では10/100Mの切替しかありませんが1Gまで対応です。\nELECOMルーター 入力も出力もRJ-45な1G対応のインターフェイスを持っています。WiFi機能もあり、2.4GHz帯と5GHz帯どちらも使えます。 \r\rマルチメディアボックス 電話やLAN、テレビ配線等をまとめられるPnasonic製の家庭用の設備箱です。10年前の新築時に設置しました。 \r\rこの箱を中心に各部屋へ電話線とLANケーブルが延びてます。電話線は無線タイプの子機を使っているので未使用です。箱の中にHUBがあります。当時は10/100Mしかありませんでした。その後1Gタイプが発売されたようですが4ポートで定価3.5万円、実売も3万円程度と非常にお高いものです。家電量販店でも1G対応の4ポートHUBは、2-3千円で購入できます。\nLAN配線は、CAT5ケーブルだと思います。8線すべて接続されています。\n宅内配線変更箇所 宅内配線のbefore/afterは、この図のとおりです。\nbefore \r\rafter \r\rafter図の[]で示した箇所を変更しました。家電量販店でCAT6Aというのを購入、550円/1m/1本でした。2本購入したので総額1,100+Tax円です。10年前の配線はそのまま活用です。\nケーブルの種類 LANケーブルは、伝送速度によりカテゴリーで区別されています。ググるとたくさんまとめたページがあります。CAT5とCAT6A何が違うかと調べると2線ごとの撚り具合のようです。 CAT7以上はケーブル内にセパレーターが入っていたり、シールド線が使われているようです。回線速度1Gbps以下であれば、CAT5もCAT5Aの違いは誤差の範囲ではと想像します。施工方法や環境によっても変化します。\n10年前、家庭内LANの速度が1Gになるとは思ってもいませんでした。時代と共に技術は進歩して価格は安くなるので、取り替えることができるように設計しておくことが重要なようです。\nまとめ プロバイダー変更に伴い宅内配線を見直しました。家庭内でも普通に1Gの時代です。頭の速さがついていってるのかが一番気になるところです。\n","permalink":"https://hkaji.github.io/blog/etc/10_home_netwok/","tags":["IPoE"],"title":"家のネットワークが爆速に...宅内配線編"},{"categories":["etc"],"contents":"プロバイダーを変更する これまでやろうやろうと思いつつも一歩踏み出せなかったプロバイダー変更ですが、年も変わったので心機一転して行動に。回線速度も上がり固定費も削減できもっとはやく行動すべきだったと反省です。\n現状と問題点 構成は、docomo光+YahooBBという妙な構成になってます。これは、YahooBB ADSLからFlets光+YahooBBになり、docomo光+YahooBBと変遷したためです。固定費としてYahooBBのプロバイダー代が毎月1,200円程掛かっているので、整理してdocomo光だけにしようと思いました。\nまた、docomo光とYahooBBの組合せでは、接続方式をIPoEにできません。とくに現状のPPPoEで問題はありません。回線速度は、このような感じです。 \r\rプロバイダー変更など docomo光で選択できるプロバイダーは多数ありますが、どこを選んでも大差はないかと思います。とくにこだわりはありません。インターネット上の評判を見つつ、渋谷駅で見かけるGMOの文字が目についてGMOにしました。「お名前.com」やホスティングサービス提供している会社です。最近は金融系にも力を入れているそうです。\ndocomoショップで土曜日変更申請して、日曜日の19時には接続方式IPoEになって開通してました。家での設定変更等はなにもありません。\n回線速度など 回線速度は、宅内見直しをして90Mbpsから最速500Mbps超えの爆速に変わりました。帯域が約5倍になりました。 \r\rYouTube見たり、ビデオミーティングなどで回線速度によって変わったなということはあり ません。もっと早く変更しておくべきだったと大変後悔してます。 宅内配線変更については、細々とあるので構成図を含めて別の記事にまとめたいと思います。\n夜中や早朝だとここまで速度が上がります。 \r\rこれでYahooBBとお別れになります。メールアドレスが削除になるので各腫サービスに登録していたYahooBBのメールアドレスを変更しないといけません。これが結構大変です。\nまとめ 家庭ネットワーク環境向上と固定費削減のためプロバイダーを変更しました。回線速度は、最高約8倍に。PCで動画やページの閲覧に関しては早くなった感はありません。固定費も削減でき非常に満足な結果でした。\n","permalink":"https://hkaji.github.io/blog/etc/09_ipoe/","tags":["IPoE"],"title":"家のネットワークが爆速に"},{"categories":["python"],"contents":"python3でseleniumを試してみる python3のライブラリーseleniumを試してみます。seleniumは、WWWコンテンツのフロント周りを自動的に試験するために作られたようです。スクレーピングのライブラリーと書かれているページもあるようです。参考リンク123を見ながら試しました。\n準備 環境 Win10+WSL2+debianな環境です。python3のバージョン等は以下のとおりです。\n1 2 3 4 5 6  $:~/python/selenium$ python3 --version Python 3.5.3 $:~/python/selenium$ $:~/python/selenium$ pip3 list | grep selenium selenium (3.141.0) $:~/python/selenium$   google chromのインストール まずはダウンロードします。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  $:~/python/selenium$ wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb Will not apply HSTS. The HSTS database must be a regular and non-world-writable file. ERROR: could not open HSTS store at \u0026#39;/home/kaji/.wget-hsts\u0026#39;. HSTS will be disabled. --2022-01-20 09:19:11-- https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb dl.google.com (dl.google.com) をDNSに問いあわせています... 172.217.31.142, 216.239.32.10, 216.239.34.10, ... dl.google.com (dl.google.com)|172.217.31.142|:443 に接続しています... 接続しました。 HTTP による接続要求を送信しました、応答を待っています... 200 OK 長さ: 90862320 (87M) [application/x-debian-package] `google-chrome-stable_current_amd64.deb\u0026#39; に保存中 google-chrome-stable_c 100%[=========================\u0026gt;] 86.65M 10.8MB/s in 7.9s 2022-01-20 09:19:19 (11.0 MB/s) - `google-chrome-stable_current_amd64.deb\u0026#39; へ保存完了 [90862320/90862320] $:~/python/selenium$   インストールします。\n1 2 3 4 5 6 7 8 9  $:~/python/selenium$ sudo dpkg -i google-chrome-stable_current_amd64.deb (データベースを読み込んでいます ... 現在 106172 個のファイルとディレクトリがインストールされています。) google-chrome-stable_current_amd64.deb を展開する準備をしています ... google-chrome-stable (97.0.4692.99-1) で (97.0.4692.99-1 に) 上書き展開しています ... google-chrome-stable (97.0.4692.99-1) を設定しています ... desktop-file-utils (0.23-1) のトリガを処理しています ... mime-support (3.60) のトリガを処理しています ... man-db (2.7.6.1-2) のトリガを処理しています ... $:~/python/selenium$   バージョンの確認です。\n1 2 3 4 5  $:~/python/selenium$ which google-chrome /usr/bin/google-chrome $:~/python/selenium$ google-chrome --version Google Chrome 97.0.4692.99 $:~/python/selenium$   WebDriver(chromdriver)のインストール 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  $:~/python/selenium$ wget https://chromedriver.storage.googleapis.com/97.0.4692.71/chromedriver_linux64.zip Will not apply HSTS. The HSTS database must be a regular and non-world-writable file. ERROR: could not open HSTS store at \u0026#39;/home/kaji/.wget-hsts\u0026#39;. HSTS will be disabled. --2022-01-20 09:48:55-- https://chromedriver.storage.googleapis.com/97.0.4692.71/chromedriver_linux64.zip chromedriver.storage.googleapis.com (chromedriver.storage.googleapis.com) をDNSに問いあわせています... 142.251.42.144, 216.239.32.10, 216.239.34.10, ... chromedriver.storage.googleapis.com (chromedriver.storage.googleapis.com)|142.251.42.144|:443 に接続しています... 接続しました。 HTTP による接続要求を送信しました、応答を待っています... 200 OK 長さ: 9982326 (9.5M) [application/zip] `chromedriver_linux64.zip\u0026#39; に保存中 chromedriver_linux64.z 100%[=========================\u0026gt;] 9.52M 11.0MB/s in 0.9s 2022-01-20 09:48:57 (11.0 MB/s) - `chromedriver_linux64.zip\u0026#39; へ保存完了 [9982326/9982326] $:~/python/selenium$   解凍してインストール\n1 2 3 4 5 6  $:~/python/selenium$ unzip chromedriver_linux64.zip Archive: chromedriver_linux64.zip inflating: chromedriver $:~/python/selenium$ $:~/python/selenium$ sudo mv chromedriver /usr/bin $:~/python/selenium$   test codeを試す リンクにあるテストコードで動作確認します。\n1 2 3 4  $:~/python/selenium$ python3 test_selenium.py Google ChromeDriver - Google 検索 $:~/python/selenium$   動作結果は、画像として保存されます。画面表示なしのヘッドレスで、ちゃんとブラウザーが動いています。 \r\rまとめ python3 seleniumライブラリーの動作を確認しました。画面表示なしでも動作することを確認できました。さらにページのクリック等の記述方法を確認して深いところまで掘っていけることを確認したいと思います。\n参考リンク   あららぼ:WSL2でSeleniumを使う\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Qiita:【これも】WSL2＋Chrome＋Selenium＋Python【検索してなぞっただけ】\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n AI-interのPython3入門:図解！PythonでSeleniumを使ったスクレイピングを徹底解説！(インストール・使い方・Chrome)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://hkaji.github.io/blog/python/01_selenium/","tags":["wsl2","debian","python3"],"title":"python3 seleniumを試す"},{"categories":["etc"],"contents":"火山噴火による気圧変化の計測 現地時間2022.1.15 13時頃南太平洋トンガ王国にて、大きな火山噴火が発生しました。 参考動画はこちら。\n  稼働中の2つの24h運用センサーが気圧の変化を測定していたので、その状況をまとめました。市販の1000円程のセンサーでも測定することができました。マイコンとセンサーのお勉強成果を連続運用していたら、たまたま測定できました。\n環境センサー2種類の測定結果 測定環境は2種類あります。どちらの環境もセンサーはBME280というマイコン業界ではよく使われている温度湿度気圧センサーです。\n環境センサー1 esp32というマイコンを使って、以下の項目を測定し10分毎にAmbientというIoTクラウドにデータを送信し可視化してます。\n 温度 湿度 気圧 照度 CO2濃度  外見は、以下のような測定環境です。今後3Dプリンターでケースを作ってまとめる予定す。 \r\r気圧の測定結果です。右上のちょっと突出している部分が気圧変化した部分です。 \r\r環境センサー2 M5stackというesp32マイコンと液晶画面のセットにセンサーを付けて、node exporterとして動作してます。温度湿度気圧データは、400kHzでセンサーから読み出してます。 このデーターをpi4bにインストールしたprometheusという時系列DBが10s毎に読み込んでます。読み込んだデータはgrafanaを使って可視化してます。\n外見はこのような感じです。 \r\r気圧の測定結果です。こちらは10s毎のデータなのでかなり詳細に可視化できます。ただし、センサーは校正しているわけではないので値の信頼度はそれなりです。横軸の時間軸を変化させると、どの程度の変化だったのか理解しやすいと思い時間軸を変えたグラフは以下のようになります。\n表示幅を1h30mに設定した結果です。 \r\r表示幅を24hに設定した結果です。 \r\r表示幅を7dに設定した結果です。 \r\rまとめ トンガ火山噴火による日本での気圧変化を環境センサーで測定した結果をまとめました。30分程度約2hPa気圧が変化してます。南半球の火山噴火により気圧変化が北半球まで伝わってくるとははじめての経験でした。津波は大きいと人的被害が出ますが、気圧の変化というのどうなのでしょうか。飛行中の航空機などは影響なかったのでしょうか。\n","permalink":"https://hkaji.github.io/blog/etc/08_eruption_tonga/","tags":["esp32","bme280"],"title":"トンガ王国火山噴火による気圧変化を計測した"},{"categories":["etc"],"contents":"SANSUI製スピーカーを修理する H10年頃に購入して転勤の時に捨てたとばかり思っていたミニコンポが発掘されました。スピーカーだけでも使えるかと見てみるとこの状況でした。 \r\r20年程経過しているのでこんなものでしょう。\nちょっと調べてみると、このボロボロの部位はウレタン製らしいです。10年程度で硬化してこのようになるそうです。他にもラバー製、布製等があるそうです。ウレタン製は柔らかくスピーカーコーンの動きを邪魔せずいいらしいですが10年毎にこうなるのはいただけません。ラバー製でも素人耳にはあまり影響ないようなのでラバー製のものに交換修理したいと思います。\n修理工程 準備 スピーカーの分解方法は、タイプによっていろいろです。基本的に箱が密閉されているので分解しずらい構造です。このスピーカーは、コンポセットに付いていたものなので難しい構造ではないと思います。 このような工具があれば、大抵は何とかなると思います。 \r\r小さいスクレーパーを購入しました。\n分解 スピーカー部分を分離したいのですが、箱はぴっちりと接着されて隠し釘で止めてあるようです。スピーカーの枠に車の部品をはがす道具を入れてグリグリすると枠はすんなり外れました。 \r\rプラスのビス4本を外せばスピーカー部分は、分離することができました。 \r\rウレタンラバーの除去 ウレタンが劣化したパリパリ部分をどんどん剥がします。破片が結構飛び散るので新聞等を敷いてやったほうが後の清掃が楽です。 コーン部分は、接着剤で引っ付いていて剥がしずらいです。カッターやピンセットを使って少しずつ地道に剥がすしかありません。できるだけ紙コーン部分は削らないように気をつけました。無水アルコールをつけるとウレタンを剝がしやすいという記事もありましたが、あまり変わりませんでした。 \r\r1h程格闘して除去完了です。はい、もう1本あります。\n金属部分の洗浄 金属枠部分に接着剤がこびりついています。ヘラ等で物理的に削除して残りの細かいのはケミカルに頼ります。アルコール、パーツクリーナー、ガソリンなどがきれいになるようです。今回は3種類で洗浄しました。ガソリンは、キャンプ等で使うバーナーのホワイトガソリンを使いました。屋内で作業すると万が一があるので寒い外で洗浄しました。 \r\r購入したラバー メジャーな高級スピーカー用には専用品があるようです。このスピーカー用というのはないので、大きさを測って汎用品を2種類購入しました。ふくらみ部分の高さや幅の違いから何タイプかあるようです。 \r\rどちらも問題なさそうです。元の形に似ているタイプを選択します。\nラバーの取付 取付には、接着剤を使います。硬化した後もカチカチにならないこの接着剤がオススメとのこと。速乾タイプは、位置決め大変なので使わない方がいいようです。量的には少量タイプもあるので、そちらで充分でした。 \r\rまずは、コーン側を接着します。コーンとラバーの縁に接着剤を塗って貼り付けます。均等に張り付くよう微調整します。接着剤は1h程で硬化します。 \r\r外側は、ラバーを持ち上げながら接着剤を塗っていきます。内側が固まっているので非常に簡単です。コーン部分にちょっと接着剤はみ出ましたが、気にしないということで。 \r\r復元 配線を元に戻して、元の向きにスピーカー部分を戻してねじ止めします。枠をはめたら作業終了です。 \r\r確認 接着剤が完全に硬化するには24h程掛かるそうです。ボリュームを小さめで確認します。 YouTube動画にスピーカー確認用動画がたくさんあるので、それを利用しました。 とくにビリビリ音もなく問題なく音が出ています。左右それぞれ高音低音それぞれのスピーカーも問題なさそうです。\nまとめ 20年程押し入れで保管されていたスピーカーのエッジラバーを修理しました。修理後、とくに問題なく音が出ることを確認しました。修理費用もラバーと接着剤代が2,000円程度で済みました。\n車のドアに付いているスピーカーも時間が経つとガサガサ音がしますが、同じ原因なら修理が可能なのかもしれません。\n参考リンク [1^]:【ﾜﾚｺｵｰﾃﾞｨｵ】JBL Control 1Xtremeエッジ交換修理する【ウレタンをゴムに】\n","permalink":"https://hkaji.github.io/blog/etc/07_speaker/","tags":["SANSUI","speaker"],"title":"SANSUI製スピーカー修理"},{"categories":["3dprinter"],"contents":"WEB cam adapterを作成する WEB camは、とくにこだわりありませんがlogicool製のC920nという機種を使ってます。 モニターの上辺に引っかけて使っているのですが上からやや下方へ撮っている感じです。 カメラレンズを目線の高さに合わせると、自然な映りになるとのことでWEB camの高さを調整します。\n併せて使っている3D CAD(fusion360)の使い方のお勉強も兼ねて作成します。3D CADも実際に操作してああしたいこうしたいを自分でやってみないと、思い通りにモデルを作ることはできません。\n高さ調整作戦 三脚アタブターを作成する 小型の三脚があるのですが、これでは高さが足りません。150mmほど持ち上げれば良さそうなので、各部を採寸してざっくりモデリングします。カメラ側には1/4インチネジのメス穴があるのでオスネジを先端に取り付けます。左右の微調整ができるようにネジ部分はアタブターにしておきます。 \r\rアダプター部分の接合を何度か繰り返してようやくいい感じになりました。3D CADの寸法とおりに積層されればいいのですが、10分の数mm程度の誤差はあります。 \r\rとくに回転する軸などはトライ\u0026amp;エラーが必要です。\n印刷時間3時間程かかって、このような感じに完成しました。 \r\r目線の高さはぴったりです。機能的には問題ありません。しかし、使用してみると三脚部分が邪魔です。足を小股にすると安定感が悪くなります。\nディスプレーに引っかけるホルダーを作成する 三脚作戦は、機能的には問題ありませんが、使用する際にちょっと邪魔なので新たな方法を考えます。モニターの上に引っかけていましたが、それを10cmほど下げるとちょうど目の高さということで、モニターに引っかけるフックのようなものを作成します。\n横断面を寸法決めながら書いて押し出します。カメラアダプターをつけられるようにぽっちを付けておきます。三脚作戦で使ったのもをそのまま流用します。 \r\rこちらも印刷3時間ほどで完成です。 \r\r厚みは3mm、インフィル20%ですが強度的には問題なさそうです。\n作成した2つのアダプターを比較 機能的には両者ともに目線の高さにカメラレンズが合うようになりました。三脚アダプターは、設置場所が手狭になるのがデメリットです。アダプターの問題ではなくそもそもの三脚の問題ですね。引っかけホルダーは、場所も取らずスッキリです。ディスプレーにキズがつかないようにゴム等を当たるところに貼った方がいいですね。勝手な評価要素でざっくり比較すると以下の表のとおりです。\n   印刷物\\評価要素 機能 使い勝手 印刷時間     三脚アダプター 〇 △ 3h   引っかけホルダー 〇 〇 3h   [表:WEB camアダプター比較]       まとめ WEB camの高さ調整をするために、2種類のモデルを作成し比較しました。引っかけるタイプが邪魔にならずスッキリ使いやすい感じでした。また、3D CADに慣れるためにも思いついたものをモデリングし印刷して、でき上がり具合を確認することが重要なことを改めて認識しました。\n","permalink":"https://hkaji.github.io/blog/3dprinter/12_cam_adapter/","tags":["ender3v2","fusion360"],"title":"WEB cam adapterの作成"},{"categories":["3dprinter"],"contents":"今回は 3Dプリンターの状況をoctoprint経由して時系列DBで監視します。その内容をgrafanaを使って派手なダッシュボードで可視化します。\n準備 3Dプリンターに接続されているpi3bにてnode exporterを動かします。参考リンク[1^]のpluginをoctoprintにインストールして再起動します。\n構成と接続 3Dプリンター、octoprintが動いているpi3b、時系列DBと可視化するためのpi4bを使います。全体的な接続は図のようになります。\n設定等の確認 pluginのexporterは動いているのか octopi pluginのexporterが動いているかは、URIをたたいてみるとわかります。データが表示されるかどうか確認します。ブラウザーでこちらをたたいてみます。\n1  http://octopi.local/plugin/prometheus_exporter/metrics   このように各種値がmetricsとして表示されます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105  # HELP octoprint_temperatures_actual Reported temperatures # TYPE octoprint_temperatures_actual gauge octoprint_temperatures_actual{identifier=\u0026#34;B\u0026#34;} 23.75 octoprint_temperatures_actual{identifier=\u0026#34;T0\u0026#34;} 23.83 # HELP octoprint_temperatures_target Targeted temperatures # TYPE octoprint_temperatures_target gauge octoprint_temperatures_target{identifier=\u0026#34;B\u0026#34;} 0.0 octoprint_temperatures_target{identifier=\u0026#34;T0\u0026#34;} 0.0 # HELP octoprint_raspberry_core_temperature Core temperature of Raspberry Pi # TYPE octoprint_raspberry_core_temperature gauge octoprint_raspberry_core_temperature 0.0 # HELP octoprint_infos_info Octoprint host informations # TYPE octoprint_infos_info gauge octoprint_infos_info{app_start=\u0026#34;1631011041\u0026#34;,host=\u0026#34;octopi\u0026#34;,octoprint_version=\u0026#34;1.6.1\u0026#34;,platform=\u0026#34;Linux\u0026#34;} 1.0 # HELP octoprint_client_num The number of connected clients # TYPE octoprint_client_num gauge octoprint_client_num 1.0 # HELP octoprint_printer_state_info Printer connection info # TYPE octoprint_printer_state_info gauge octoprint_printer_state_info{state_id=\u0026#34;OPERATIONAL\u0026#34;,state_string=\u0026#34;Operational\u0026#34;} 1.0 # HELP octoprint_started_prints_total Started print jobs # TYPE octoprint_started_prints_total counter octoprint_started_prints_total 0.0 # HELP octoprint_started_prints_created Started print jobs # TYPE octoprint_started_prints_created gauge octoprint_started_prints_created 1.6310110257599866e+09 # HELP octoprint_failed_prints_total Failed print jobs # TYPE octoprint_failed_prints_total counter octoprint_failed_prints_total 0.0 # HELP octoprint_failed_prints_created Failed print jobs # TYPE octoprint_failed_prints_created gauge octoprint_failed_prints_created 1.63101102576006e+09 # HELP octoprint_done_prints_total Done print jobs # TYPE octoprint_done_prints_total counter octoprint_done_prints_total 0.0 # HELP octoprint_done_prints_created Done print jobs # TYPE octoprint_done_prints_created gauge octoprint_done_prints_created 1.6310110257601268e+09 # HELP octoprint_cancelled_prints_total Cancelled print jobs # TYPE octoprint_cancelled_prints_total counter octoprint_cancelled_prints_total 0.0 # HELP octoprint_cancelled_prints_created Cancelled print jobs # TYPE octoprint_cancelled_prints_created gauge octoprint_cancelled_prints_created 1.6310110257601933e+09 # HELP octoprint_captured_timelapses_total Timelapse captured # TYPE octoprint_captured_timelapses_total counter octoprint_captured_timelapses_total 0.0 # HELP octoprint_captured_timelapses_created Timelapse captured # TYPE octoprint_captured_timelapses_created gauge octoprint_captured_timelapses_created 1.631011025760261e+09 # HELP octoprint_print_progress Print progress # TYPE octoprint_print_progress gauge # HELP octoprint_print_time_elapsed Print time elapsed # TYPE octoprint_print_time_elapsed gauge # HELP octoprint_print_time_est Print time estimate # TYPE octoprint_print_time_est gauge # HELP octoprint_print_time_left_estimate Print time left estimate # TYPE octoprint_print_time_left_estimate gauge # HELP octoprint_slice_progress Slice progress # TYPE octoprint_slice_progress gauge # HELP octoprint_printing_time_total Printing time total # TYPE octoprint_printing_time_total counter octoprint_printing_time_total 0.0 # HELP octoprint_printing_time_created Printing time total # TYPE octoprint_printing_time_created gauge octoprint_printing_time_created 1.631011025761908e+09 # HELP octoprint_extrusion_total Filament extruded total # TYPE octoprint_extrusion_total counter octoprint_extrusion_total 0.0 # HELP octoprint_extrusion_created Filament extruded total # TYPE octoprint_extrusion_created gauge octoprint_extrusion_created 1.6310110257619894e+09 # HELP octoprint_extrusion_print Filament extruded this print # TYPE octoprint_extrusion_print gauge octoprint_extrusion_print 0.0 # HELP octoprint_x_travel_total X axis travel total # TYPE octoprint_x_travel_total counter octoprint_x_travel_total 0.0 # HELP octoprint_x_travel_created X axis travel total # TYPE octoprint_x_travel_created gauge octoprint_x_travel_created 1.6310110257621343e+09 # HELP octoprint_x_travel_print X axis travel in this print # TYPE octoprint_x_travel_print gauge octoprint_x_travel_print 0.0 # HELP octoprint_y_travel_total Y axis travel total # TYPE octoprint_y_travel_total counter octoprint_y_travel_total 0.0 # HELP octoprint_y_travel_created Y axis travel total # TYPE octoprint_y_travel_created gauge octoprint_y_travel_created 1.6310110257623897e+09 # HELP octoprint_y_travel_print Y axis travel in this print # TYPE octoprint_y_travel_print gauge octoprint_y_travel_print 0.0 # HELP octoprint_z_travel_total Z axis travel total # TYPE octoprint_z_travel_total counter octoprint_z_travel_total 0.0 # HELP octoprint_z_travel_created Z axis travel total # TYPE octoprint_z_travel_created gauge octoprint_z_travel_created 1.631011025762542e+09 # HELP octoprint_z_travel_print Z axis travel in this print # TYPE octoprint_z_travel_print gauge octoprint_z_travel_print 0.0 # HELP octoprint_print_fan_speed Fan speed # TYPE octoprint_print_fan_speed gauge octoprint_print_fan_speed 0.0   時系列DBにpullする exporterの値を時系列DBへ取り込むためprometheus.ymlに以下を追加します。ブラウザーからmetric読めるのでapikeyは不要と思ってましたが、この行がないと403 forbiddenで引っ張れません。これがわかるまで2h。作者のReadme.mdは隅々までよく読みましょう。ちゃんと書いてありました。\n1 2 3 4 5 6 7  - job_name:\u0026#34;octoprint\u0026#34;scrape_interval:5smetrics_path:\u0026#34;/plugin/prometheus_exporter/metrics\u0026#34;params:apikey:[\u0026#39;__octprint_api key___\u0026#39;]static_configs:- targets:[\u0026#34;IP_address:80\u0026#34;]  prometheusにデータが入っているのかを確認 prometheusの画面上タブから「Status→Target」を選択すると、prometheus.ymlに書いたscrape設定が機能しているか確認できます。 \r\rこのようにstat欄がupになっていると問題なくデータをpullできています。downだと右端にエラーの細部が表示されます。ネットワーク的にたどり着いてないとか、403 Forbiddenとか。内部環境によってそれに応じた問題解決が必要です。\ngrafanaを設定する prometheusにデータが蓄えられているところまで確認できると、次はgrafanaの設定です。参考リンクにダッシュボードのサンプルjsonファイルがあったので、importしました。 \r\r時系列DB内には、他の値も蓄積されているのでチマチマとダッシュボードをカスタマイズします。pi3b内のcore tempの値を引っ張ってきているのですが「0」のままなので原因探求。\npi3bのユーザpiがsudoグループに入ってなかったのでvcgencmdでcore tempデータを引っ張ってこれなかったようです。\n派手なダッシュボード完成 OSSの組合せでこのような監視環境ができました。 \r\r左上の印刷キャンセルした値がおかしいですが、追々修正します。octoprintでは、ベッドとノズル温度変化しか可視化されませんが、以下の項目を可視化する事ができました。\n プリンターの稼働状況 印刷した数 印刷失敗した数 印刷キャンセルした数 octoprintが動いているpi3bのcore temp 各軸の移動距離 フィラメントを出すエクストルーダーの移動距離 造形物冷却ファンの稼働状況  これらの可視化により、失敗のない印刷に繋がればと思います。\nまとめ 3Dプリンターに接続しているpi3bで動かしているoctoprintにpluginを追加しました。時系列DBや可視化ソフトウェアを使って、3Dプリンターの内部情報をダッシュボード上に可視化しました。印刷パラメーターを調整し、造形物の形によらず、失敗の少ない印刷環境が構築できればと思います。\n参考リンク [1^]:Prometheus Exporter\n","permalink":"https://hkaji.github.io/blog/3dprinter/11_prometheus/","tags":["ender3v2","prometheus"],"title":"3Dプリンターを時系列DBで派手に監視する"},{"categories":["etc"],"contents":"数独問題読み取り格闘中です 数独の問題読み取りを進めています。開発環境をpi4b上で構築したいところです。 pythonは問題く動きますが、OpenCVなどを使うときの画面が面倒です。リモートデスクトップなどですべての画面をwin10に飛ばしてくればいいのですが、VScodeの設定が2つに分かれるのがちょいと面倒です。\nwin10のVScodeからなんとかできないかと調べてみました。\nwin10でX serverを動かせば解決 Freeなwin10のX serverは、VcxSrvやXmingなどがあります。 DLしてインストールすれば使えます。\n設定など pi4b側は、DISPLAY変数の設定が必要です。それぞれのshellの設定です。 bashな場合は、以下の設定を.bashrcなどに書いておけばいいです。\n1  export DISPLAY=win10_IP_address:0.0   win10側は、X serverのアプリケーションをインストールしてアクセス可能にしておけば問題ありません。 \r\rVcXsevの場合は、起動して3つ目の設定画面の中、黄色で示したところにチェックを入れて、アクセス可能にしておけば問題ありません。これがわからずに結構悩みました。英語もちゃんと読みましょうです。\nリモートな環境でのOpenCV開発なども、win10+VScodeでお気軽にできることを確認しました。\nまとめ リモートマシンのX画面を飛ばす方法についてまとめました。\n参考リンク ","permalink":"https://hkaji.github.io/blog/etc/06_vxsrv/","tags":["pi4b","win10","VScode","VcxSrv"],"title":"Remote python開発(OpenCVなど)"},{"categories":["etc"],"contents":"こちらの動画に触発されて こちらの動画に触発されて、これは実際にやってみないと。   直感的には凄く面倒な感じですが、pythonソースも公開されており少しずつ確認しながらやっていけばゴールするかもです。\n問題を以下のように3分割します。\n 問題をカメラで撮影し画像処理して、数字データに変換する。 数字データを元に問題を解く 解を3Dプリンターヘッドにペンを付けて書く  今後の予定 問題を分割することによってハードルが下がりやる気も出てくるのではと思ってます。完成予定はわかりませんが、やる気の湧き上がったときに進めていきたいと思います。\n作成したGitHubページ1は、参考リンクに\n参考リンク   GitHub sudoku\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://hkaji.github.io/blog/etc/05_sudoku/","tags":["pi zero","debian","opencv","tesseract","ender3v2"],"title":"数独にチャレンジ"},{"categories":["www"],"contents":"fancyboxの画像幅を変更する hugoを使い始めて数か月。ページ内に画像を張るのはfancyboxを使ってます。 デフォルトのまま使うと、表示画像が元画像の幅になりページからはみ出ます。\nこれを何とか修正したいと思ます。\n先人を探せ 先人を探してもそもそもhugoを日本語で使っているユーザーは少ないようです。 これまでfront周りは見た目のお好みとあまり真剣に触ってきませんでした。\n勉強しつつお試しつつということで、少しづつ修正します。\nlayout/shortcodes/fancybox.html hugoは、このフォルダーに動かしたいスクリプトを入れておくと、自動的にhtmlに埋め込んでくれます。\n1 2 3  \u0026lt;div class=\u0026#34;fancybox\u0026#34;\u0026gt; \u0026lt;a data-fancybox=\u0026#34;{{ $gallery }}\u0026#34; href=\u0026#34;{{ $path }}/{{ $file }}\u0026#34; data-caption=\u0026#34;{{ $caption }}\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;{{ $path }}/{{ $file }}\u0026#34; width=\u0026#34;300px\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt;   ちょっとやり方はベタですが、htmlに埋め込む箇所にwidth=\u0026quot;300px\u0026quot;を挿入しました。もう少しfancybox3のoptionを調べて試行錯誤を続けてみます。\n画像クリックしたときに、ギャラリーとしてズームするらしいですがそこがちゃんと動きません。こちらも逐次修正します。\n画像クリックしたときに、Group表示するようになりました。Firefoxでは動かないと思っていたら、Firefoxをリセットすると動くとのページをみつけ、やってみるとおーーー。 ちゃんと動きました。\n参考リンク ","permalink":"https://hkaji.github.io/blog/www/04_fancybox/","tags":["hugo","fancybox"],"title":"fancyboxの画像幅を変更"},{"categories":["3dprinter"],"contents":"今回は 久しぶりに3Dプリンターを使って壊れた家電部品を作成しようとしたら、PLAが出てきません。 出てこないというか少しは出てくるのですが、詰まってる感じです。 3Dプリンター故障原因究明と家電部品作成です。\n家電部品の作成 加湿器水タンクの蓋の部品が折れて、水がダダ洩れです。プラスチック製なので3Dプリンターで作れそうな感じです。 \r\rちなみに、この部品を含んだ水タンクの蓋はメーカーより補修品として提供されていて1,320+送料で購入可能です。\n採寸とモデリング ピンポイントでThingiversにモデルが出ているといいのですがなさそうです。メーカーも詳細な部品図面出してくれるといいのですが。部品自体そんなに精度は必要ないでしょうから、ポイントをデジノギで採寸します。縦の1/2断面を書いて中心軸360度回転させるとモデルは簡単にできそうです。 \r\rfusoin360を使って30分程でできました。\n印刷ができません 故障探求 いつものノズルつまりかと思って、細い針金でノズル先端付近を突っついても改善しません。テフロンチューブ内かなとライトを当ててみるとヘッドから5cm程のところが陰になって詰まっている感じです。これは、テフロンチューブの交換です。ということでポチっ。 \r\r翌日、交換部材が届いたので同じ長さに切って交換します。交換前のテフロンチューブ内PLAは、うんともすんとも動きません。後ほど切ってどうなってるか調べます。\n新しいテフロンチューブにPLAを通してみるとすーすーです。一緒に付いてきたコネクター類も交換してテスト印刷してみると、最初はPLA溶けてでてくるのですが、徐々に出てこなくなります。\n故障探求改めて 一晩おいて再確認すると、ヘッドのファンが動いていません。DC/DCコンバーターで24V-\u0026gt;12V変換して、プリンター電源オンでpi3bのケースファンとこのヘッドファンはオンになるはずです。ファン静音化のためか気づきませんでした。ヘッドファンを指で動かすと動くのですが回りません。 \r\rヘッドファンが原因なのか とりあえずヘッドファンの探求です。DC/DCコンバーター出力からヘッドファン接続点までは導通OKです。ヘッドファンを切断して別の12Vに接続すると元気よく回ります。ファンにゴミが挟まっていたのか、配線が圧着だったので接触不良だったのか。配線の接続は半田付けにしました。元に戻して作動テストはOKです。\n再びテフロンチューブ 昨日交換したテフロンチューブをヘッド側から裂いてみました。10cm位まで裂くとPLAが動きます。 \r\r見た目ではわからないのでデジノギでPLAの直径を計測してみました。\nヘッド側 \r\rエクストルーダー側 \r\rPLAの直径は1.75mm、テフロンチューブの内径は2mmです。それぞれ誤差はありますが。ヘッド上部で加熱されて膨張していることが確認できました。\nつまり原因と考察 ヘッドがファンで冷却されず、上部まで170度超えとなったため、PLAがヘッド上部で加熱され膨張したためつまりの原因となったのでは推測できました。ヘッドファン停止に気が付かなかったのが敗因でした。そのおかげで、遠回りしましたが原因がわかったのでよかったとします。\n家電部品はどうなった 3Dプリンター復活後、家電部品は問題なく印刷できました。 \r\r折れた部品と交換し水漏れすることなく機能してます。 \r\r印刷部品は充填率20%のものを使用してますが、とくに強度的に問題ないようです。\nまとめ ちょっと時間はかかりましたが、3DプリンターのPLA詰りは問題点がわかり解決できました。静音ファンには要注意です。家電部品も修理でき問題なく稼働してます。\n","permalink":"https://hkaji.github.io/blog/3dprinter/10_print_tube/","tags":["ender3v2","TPFE"],"title":"PLAが出てきません+家電部品作成"},{"categories":["etc"],"contents":"今回は Pi zero 2が発売されたようですが、Pi zeroの話題です。OSがメジャーバージョンアップされたので、pi4bを更新する前のお試しでやってみました。\n更新前の状況 Pi zeroの更新前各種状況です。\n1 2 3 4 5 6 7  pi@pizero:~ $ lsb_release -a No LSB modules are available. Distributor ID: Raspbian Description: Raspbian GNU/Linux 10 (buster) Release: 10 Codename: buster pi@pizero:~ $   1 2 3 4 5 6 7 8 9 10 11 12  pi@pizero:~ $ cat /etc/os-release PRETTY_NAME=\u0026#34;Raspbian GNU/Linux 10 (buster)\u0026#34; NAME=\u0026#34;Raspbian GNU/Linux\u0026#34; VERSION_ID=\u0026#34;10\u0026#34; VERSION=\u0026#34;10 (buster)\u0026#34; VERSION_CODENAME=buster ID=raspbian ID_LIKE=debian HOME_URL=\u0026#34;http://www.raspbian.org/\u0026#34; SUPPORT_URL=\u0026#34;http://www.raspbian.org/RaspbianForums\u0026#34; BUG_REPORT_URL=\u0026#34;http://www.raspbian.org/RaspbianBugs\u0026#34; pi@pizero:~ $   ということで、まだbusterです。gccもまだ8.6です。\n1 2 3 4 5 6 7  pi@pizero:~ $ gcc --version gcc (Raspbian 8.3.0-6+rpi1) 8.3.0 Copyright (C) 2018 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. pi@pizero:~ $   ヘッドレスなインストールやってみた 参考リンクを見ながら、ヘッドレス(ディスプレーやキーボードを接続しないという意味)にインストールしました。Pi OS imagerも1.6.2にバージョンを上げるとSDカードへ書き込む際、WiFiやアカウントの設定ができるようになりました。これまでヘッドレスにインストールうまくいった試しありませんでしたが初成功です。\nインストール後は\n1 2 3 4 5 6 7  pi@raspberrypi:~ $ lsb_release -a No LSB modules are available. Distributor ID: Raspbian Description: Raspbian GNU/Linux 11 (bullseye) Release: 11 Codename: bullseye pi@raspberrypi:~ $   1 2 3 4 5 6 7 8 9 10 11 12  pi@raspberrypi:~ $ cat /etc/os-release PRETTY_NAME=\u0026#34;Raspbian GNU/Linux 11 (bullseye)\u0026#34; NAME=\u0026#34;Raspbian GNU/Linux\u0026#34; VERSION_ID=\u0026#34;11\u0026#34; VERSION=\u0026#34;11 (bullseye)\u0026#34; VERSION_CODENAME=bullseye ID=raspbian ID_LIKE=debian HOME_URL=\u0026#34;http://www.raspbian.org/\u0026#34; SUPPORT_URL=\u0026#34;http://www.raspbian.org/RaspbianForums\u0026#34; BUG_REPORT_URL=\u0026#34;http://www.raspbian.org/RaspbianBugs\u0026#34; pi@raspberrypi:~ $   ということで、無事buster→bullseysに更新できました。\n1  pi@raspberrypi:~ $sudo apt-get install prometheus-node-exporter   これを動かして、Prometheusの監視下に入れておきます。 gccも10.2にバージョンが上がっています。\n1 2 3 4 5 6 7  pi@raspberrypi:~ $ gcc --version gcc (Raspbian 10.2.1-6+rpi1) 10.2.1 20210110 Copyright (C) 2020 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. pi@raspberrypi:~ $   しばらく様子みます 更新後一晩経過してPrometheusで監視している状況をgrafanaでみてみました。ちゃんと監視環境には入ってます。node exporterがいろいろとデーター吸い出すのに苦労しているのか、以前よりCPU負荷が上がってます。metricsに出す項目を整理しないとですね。\n\r\r今回のまとめ Pi zeroのOSをbusterからbullseysに更新しました。再度インストールしたnode exporterの調整が必要なようです。\n参考リンク 【ラズパイZero】モニターなしでセットアップ\nRaspberry Pi OS - Raspberry Pi\n","permalink":"https://hkaji.github.io/blog/etc/04_debian_bullseys/","tags":["pi zero","debian","bullseys"],"title":"Pi zero buster-\u003ebullseysに更新"},{"categories":["tsdb"],"contents":"今回は eps32をにBME280温度湿度センサーを接続し、node exporterとして動かしています。 同じネットワーク上のpi4bにPrometheusをdockerで動かして、15s毎にデータを吸い出してます。1ヵ月(=30日)でどの程度のディスク容量が必要なのか調べました。\n環境 esp32 node exporter BME280を接続したesp32をnode exporterとして動かしています。提供しているmetricsは、参考リンク1のとおりです。12項目のデータ(BME280センサー関連3種類、esp32内部情報9種類)を提供しています。\nその他のexporter 以下のマシンにexporterを動かしています。\n pi4b: docker内 pi3b: octpi exporter plugin pi zero:  Prometheusの設定 Prometheus側の設定は、```prometheus.yml``にて以下のようにjobを指定してます。 esp32の設定は以下のように、他のexporterは5s間隔で設定しています。\n1 2 3 4 5 6  scrape_configs:- job_name:\u0026#34;exporter_esp32\u0026#34;scrape_interval:10smetrics_path:\u0026#34;/metrics\u0026#34;static_configs:- targets:[\u0026#34;esp32 IP address:80\u0026#34;]  10s毎にmetircsデータを蓄積します。\n/diskの中身は Prometheusはdockerで動かしていて、/dataがデータ領域です。 以下のようなフォルダーができました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  /prometheus # ls /prometheus # cd /data/ /data # ls 01FHQG4WN767261MPNBNAVYA8A 01FKQ7FQH38D8Y528X9VP1APAB 01FHX9HHXNGF6BHDV15ABDX16K 01FKX0WC00QATDZ1T701KKVFC7 01FJ32Y42RYQPB1BCZWREHV3S9 01FKYYNXDXXEJHF9J2E8Z33TCZ 01FJ8WASTEHH69BP47K2K9BFAB 01FKZCD91NHV3WFCD2TB17KQ4P 01FJENQD5QD5WYE7SQG8VNJZ3C 01FKZK909NRMBA80NHAJ1BWQ1C 01FJMF3ZCWCNA0SB1YKVGD9Z7H 01FKZK90T99PZPJP4SKW79XPJQ 01FJT8GMNR165VVTF370BNEK42 chunks_head 01FK01X6X041HF58NFR15FQWAB lock 01FK5V9TMBFG6H7RK65MDZAEN5 queries.active 01FKBMPFZ8ZQ9R06MM2NABY73S wal 01FKHE3249XK8CTBZPT0EV7BEW /data #    それぞれのフォルダーの中身の構成です。吸い出されたデータは、walというフォルダー内に128MBまで書き込まれて、溢れるとchunks内のファイルに書き込まれるそうです。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  /data # ls -la 01FHQG4WN767261MPNBNAVYA8A/ total 3804 drwxr-xr-x 3 root root 4096 Oct 11 11:00 . drwxr-xr-x 21 root root 4096 Nov 8 11:00 .. drwxr-xr-x 2 root root 4096 Oct 11 11:00 chunks -rw-r--r-- 1 root root 3874622 Oct 11 11:00 index -rw-r--r-- 1 root root 1494 Oct 11 11:00 meta.json -rw-r--r-- 1 root root 9 Oct 11 11:00 tombstones /data # ls -la 01FHQG4WN767261MPNBNAVYA8A/chunks/ total 79944 drwxr-xr-x 2 root root 4096 Oct 11 11:00 . drwxr-xr-x 3 root root 4096 Oct 11 11:00 .. -rw-r--r-- 1 root root 81849804 Oct 11 11:00 000001 /data #    disk使用量は以下のとおりです。1ヵ月で約1.3GBとなりました。保存期間を30dに設定しているのでこれ以上増えることはないと思います。\n1 2 3  /data # du -ks /data/ 1312636 /data/ /data #    今回のまとめ 4つのexporterの値をPrometheusで集めた結果、1ヵ月で約1.3GBのデータ量となることがわかりました。exporterの数やmetricsの数、scrape時間等によってデータ量がどのようになるのか追って分析していきたいと思います。\n参考リンク 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  # esp32_uptime # TYPE esp32_uptime gauge esp32_uptime 1987095848 # esp32_wifi_rssi # TYPE esp32_wifi_rssi gauge esp32_wifi_rssi -62 # esp32_heap_size # TYPE esp32_heap_size gauge esp32_heap_size 351932 # esp32_free_heap # TYPE esp32_free_heap gauge esp32_free_heap 112768 # esp32_cpu_frequency # TYPE esp32_cpu_frequency gauge esp32_cpu_frequency 240 # esp32_sketch_size # TYPE esp32_sketch_size gauge esp32_sketch_size 864128 # esp32_flash_size # TYPE esp32_flash_size gauge esp32_flash_size 1310720 # esp32_available_size # TYPE esp32_available_size gauge esp32_available_size 446592 # esp32_temperature # TYPE esp32_temperature gauge esp32_temperature 53.33 # BME280_temperature # TYPE BME280_temperature gauge BME280_temperature 24.92 # BME280_humidity # TYPE BME280_humidity gauge BME280_humidity 50.75 # BME280_atmospheric_pressure # TYPE BME280_atmospheric_pressure gauge BME280_atmospheric_pressure 1010.37     esp32 node exporterのmetrics\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://hkaji.github.io/blog/tsdb/02_prometheus_disk/","tags":["prometheus","grafana","promQL","esp32",""],"title":"Prometheusのデータはどのくらい溜まるのか"},{"categories":["etc"],"contents":"Windows 11への更新はいつすべきなのか 更新画面にこのようなエリアが出てきました。これまで準備中なのでしばらくお待ちくださいだったのですが。 \r\rYouTubeの更新しました動画をみていると、見た目が変わっただけの感じです。 wslが変わって、画面表示系のアプリケーションも自動で画面が飛んでくるようになったようです。以前のWSLがマージされたんですね。\nそのうち更新したら改めて、ネタにしたいと思います。\n","permalink":"https://hkaji.github.io/blog/etc/03_win11/","tags":["windows11"],"title":"Windows11のupgradeは"},{"categories":["www"],"contents":"lightboxを設定する hugoは、SSGということで画像を貼ると張った大きさで表示されます。 クリックすると画像が大きく表示されるような仕組みはちょっと仕込みが必要です。\nlightboxというJSな仕組みがあるようなので、仕込んでみます。 参考リンク123を見ながら、最新版をgit cloneして所定のフォルダーにコピーします。\nlayouts/patials/head.htmlに以下を追記します。\n1 2 3 4  \u0026lt;!-- plugin lightbox--\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/lightbox.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;js/lightbox.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;   とやってましたがが、以下の内容を /layouts/shortcodes/lightbox.htmlに作成すると、先ほどの追加は不要です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.1/css/lightbox.min.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.1/js/lightbox.min.js\u0026#34;\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;!-- set options https://lokeshdhakar.com/projects/lightbox2/ --\u0026gt; \u0026lt;script\u0026gt; lightbox.option({ \u0026#39;resizeDuration\u0026#39;: 200, \u0026#39;wrapAround\u0026#39;: true }) \u0026lt;/script\u0026gt; \u0026lt;div\u0026gt; \u0026lt;a href=\u0026#34;{{.Params.src}}\u0026#34; data-lightbox=\u0026#34;{{.Params.group}}\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{.Params.src}}\u0026#34; class=\u0026#34;posting\u0026#34; /\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt;   mdファイルにこのように記述 あとは、mdファイルに以下のように記述すると画像が表示されて、画像をクリックすると大きくなります。\n1  {{＜lightbox src=\u0026#34;/images/www/hogegoe.jpg\u0026#34;\u0026gt;}}   (表示上、最初の\u0026quot;\u0026lt;\u0026ldquo;は大文字です)\n以下lightboxによる画像表示の例です。クリックすると大きく表示されます。\n\r\r\rlightbox.option({\r'resizeDuration': 200,\r'wrapAround': true\r})\r\r\r  \r\r\rlightbox.option({\r'resizeDuration': 200,\r'wrapAround': true\r})\r\r\r \nlightbox-\u0026gt;fancyboxはどうよ 参考リンク4を見ながら、fancyboxを試してみます。設定は参考リンクのとおりです。 画像クリックしたときの表示がこっちの方がよそうです。\n記述はこのように書くようです。\n1  {{＜fancybox \u0026#34;/images/www/\u0026#34; \u0026#34;category.jpg\u0026#34; \u0026#34;category\u0026#34; \u0026#34;cat_gp\u0026#34;\u0026gt;}}   (表示上、最初の\u0026rdquo;\u0026lt;\u0026ldquo;は大文字です)\n\r\rまとめ hugoでクリック画像表示させるためlightboxとfancyboxを設定しました。SSGは、アドオンクリックでというわけにはいきません。\n参考リンク   CDNにホストされているJQueryファイルを読む\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Lightbox最新版（2.7.1）の設置方法と使い方\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n GitHub lightbox2\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n SIerがいろいろ試してみるブログ\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://hkaji.github.io/blog/www/03_lightbox/","tags":["hugo","lightbox"],"title":"hugoでlightbox,fancyboxを使えるようにする"},{"categories":["www"],"contents":"hugoでカテゴリー毎の記事数を表示する addinでちゃちゃっといきたいところですが、そうでもないようです。 先人の知恵を調べていると内部変数があるので、それを数えて表示させるといけそうです。 カテゴリー名の横に記事数が追加されました。 footer.htmlも同じようにいけそうですが、こちらはそのままにしておきます。\n変更箇所 layout/partials/sidebar.htmlのカテゴリー表示部分を以下のように変更します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  \u0026lt;div class=\u0026#34;widget\u0026#34;\u0026gt; \u0026lt;h4 class=\u0026#34;widget-title\u0026#34;\u0026gt;Category\u0026lt;/h4\u0026gt; \u0026lt;!-- {{- if isset .Site.Taxonomies \u0026#34;categories\u0026#34; }} {{- if not (eq (len .Site.Taxonomies.categories) 0) }} \u0026lt;ul class=\u0026#34;list-unstyled\u0026#34;\u0026gt; {{- range $name, $items := .Site.Taxonomies.categories }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ `categories/` | relLangURL }}{{ $name | urlize | lower }}\u0026#34;\u0026gt;{{ $name | title | humanize }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{- end }} \u0026lt;/ul\u0026gt; {{- end }} {{- end }} --\u0026gt; \u0026lt;!-- category数表示 --\u0026gt; \u0026lt;ul class=\u0026#34;list-unstyled\u0026#34;\u0026gt; {{ range .Site.Taxonomies.categories.ByCount }} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ \u0026#34;/categories/\u0026#34; | relURL }}{{ .Name | urlize }}\u0026#34;\u0026gt;{{ .Name }}({{ .Count }})\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt;   参考リンク [^1]Hugoでタグやカテゴリーはどう扱うの？\n","permalink":"https://hkaji.github.io/blog/www/02_hugo_category/","tags":["hugo","html"],"title":"hugoにcategory毎の記事数を表示する"},{"categories":["3dprinter"],"contents":"今回は 3D CADで設計したものと印刷したものは、若干大きさが異なります。その差がどれくらいなのか調べてみました。\n印刷 20mm角の立方体を印刷します。XYZ面に文字が彫ってあるので、あとからどの面かわかりやすいです。1個30分程度で印刷できます。個体差を見るために3個別々に印刷しました。 \r\rプリンターとスライスソフト設定  0.4mm ノズル 1.75mm PLA（青） ノズル温度 200度 ベッド温度 55度 積層ピッチ 0.2mm インフィル 20% 印刷速度 50mm/s 初期レイヤー速度 20mm/s ファン速度 70%  測定結果 xyz方向をノギスで測定します。測定方法を一定にするためノギスを机上に置いて、対象物を挟んで測定しました。 \r\rそれぞれのxyz軸をデジタルノギスで測った結果です。\n表:印刷物測定結果\n   印刷物\\軸 x軸 y軸 z軸     印刷1 19.98 19.86 19.71   印刷2 19.98 19.90 19.70   印刷3 19.94 19.85 19.73         avg(mm) 19.97 19.87 19.71   ratio(%) 99.93 99.35 98.56    x,y軸方向は1%未満ですが、z軸方向は1.5%程短い結果となりました。\nスライスソフトで、少し拡大させるとぴったりになるかもしれません。追って試してみたいと思います。\nまとめ 3D printer印刷時の誤差を実測しました。x,y軸方向は1%未満でしたがz軸方向は1.5%程短い結果になりました。スライスソフトで修正可能か今後試してみたいと思います。\n","permalink":"https://hkaji.github.io/blog/3dprinter/07_print_gosa/","tags":["ender3v2"],"title":"Ender3v2の印刷誤差を調べる"},{"categories":["robo"],"contents":"倒立ロボ再び これでま2機作成しましたが、1機は倒立、1機は倒立せずとの状況です。 今回は、ギヤボックスを使わず、モーター軸を足にするタイプの倒立ロボ挑戦です。\n詳細は、GitHub上に状況や3Dプリンターのstlファイル、プロラムソース等を公開します。\nGitHubへのリンクは、こちら\n以前作成した倒立ロボの記事は、逐次サルベージします。\n","permalink":"https://hkaji.github.io/blog/robo/30_3vrobo/","tags":["M5stackC plus","3V motor"],"title":"倒立ロボ...再び"},{"categories":["go"],"contents":"wsl2 debianにgo開発環境を構築する 今回は 以前マニアックblogに使っていたbloggerの記事をhugoへ引っ越しするために、なにかいいツールがないかと探していました。xmlをmarkdownに変換してくれるプログラム1がありました。 go言語で書かれており、sourceで配布です。バイナリーはありません。 ということでまずは、go開発環境2の構築です。\n準備 goのページを眺めていると各種プラットホーム用のバイナリーが配布されています。 この記事を書いている時点での最新版は、go1.17.2です。 linux 64bit版もあります。wsl2のdebianは、aptでインストールできるかなと試してみると、あっという間にインストール完了です。\n1 2 3  kaji@DESKTOP-DBHI6DO:~$ go version go version go1.7.4 linux/amd64 kaji@DESKTOP-DBHI6DO:~$   ちょっと古いですが、まぁ問題ないでしょう。\n変換プログラムを作成する aptで問題なく構築できたgo開発環境を使って、main.goをビルドします。 変換プログラムをgit cloneしてbuildします。\n1 2 3  kaji@DESKTOP-DBHI6DO:~/$ git clone https://github.com/natefinch/blogimport.git kaji@DESKTOP-DBHI6DO:~/$ cd blogimport kaji@DESKTOP-DBHI6DO:~/$ go build -o blogimport main.go   これでblogimportというバイナリーが作成されます。使い方は、xmlファイルを読ませて、変換後のmarkdown fileを吐き出すdirを指定すると、指定したdirに記事毎のmarkdownファイルが作成されるようです。\n1 2 3 4 5 6  kaji@DESKTOP-DBHI6DO:~/blogimport$ ./blogimport Usage: ./blogimport [options] \u0026lt;xmlfile\u0026gt; \u0026lt;targetdir\u0026gt; options: -extra string additional metadata to set in frontmatter kaji@DESKTOP-DBHI6DO:~/blogimport$   xmlをmdに変換する bloggerから記事をback upのために吐き出すとxmlができるので、これをmarkdownに変換します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  kaji@DESKTOP-DBHI6DO:~$ ./blogimport/blogimport blog-03-24-2021.xml ./blogger_0324 rote 106 published posts to disk. Wrote 8 drafts to disk. kaji@DESKTOP-DBHI6DO:~$ kaji@DESKTOP-DBHI6DO:~$ ls -l blogger_0324/ 合計 644 -rw-r--r-- 1 kaji kaji 3408 10月 10 13:15 2年ぶりのラズパイ...1日目.md -rw-r--r-- 1 kaji kaji 8039 10月 10 13:15 2年ぶりのラズパイ...2日目.md -rw-r--r-- 1 kaji kaji 3999 10月 10 13:15 2年ぶりのラズパイ...3日目.md -rw-r--r-- 1 kaji kaji 3499 10月 10 13:15 2年ぶりのラズパイ...4日目.md -rw-r--r-- 1 kaji kaji 1976 10月 10 13:15 2年目のラズパイ...10日目esp-wroom-2...pythonlcd.md -rw-r--r-- 1 kaji kaji 3311 10月 10 13:15 2年目のラズパイ...11日目...radikoでラジオ.md -rw-r--r-- 1 kaji kaji 4011 10月 10 13:15 2年目のラズパイ...12日目...esp32始動.md -rw-r--r-- 1 kaji kaji 2853 10月 10 13:15 2年目のラズパイ...13日目...esp32でlチカ.md -rw-r--r-- 1 kaji kaji 6085 10月 10 13:15 2年目のラズパイ...14日目...esp32oled.md -rw-r--r-- 1 kaji kaji 5533 10月 10 13:15 2年目のラズパイ...16日目...9軸センサー.md   無事markdownファイルに切り出すことができました。 markdownとhtmlが混在しているので、あとは手動で微修正しながら、hugo環境に移行したいと思います。画像は入れ直しです。記事を整理しながら移行していきたいと思います。\nまとめ go言語で書かれたxml2md変換プログラムを使って、以前のblogger記事をmarkdownファイルに変換できました。\n参考リンク   blogimport\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n go\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://hkaji.github.io/blog/go/01_go_env/","tags":["wsl2","go-lang"],"title":"wsl2にgo開発環境を"},{"categories":["www"],"contents":"今日は SSG(Static Site Generation)を使って、blogページを作ってみます。\n経緯 組込みや3Dプリンターなどマニアックなネタをまとめたblogを続けていますが、evernoteやnotionに下書きしてbloggerにコピーして画像貼り付けという流れでやってました。流行りのCMSへの移行を検討しWordPressやghostを試しましたが、DBを構築しないといけないのとJSで書かれた本体のメンテが面倒な感じです。何かいい方法はないかと探っていたらSSGというの見つけました。markdownで記事を書いたのをgeneratorがhtmlに変換してくれます。VScodeで作業すると、gitでファイルの管理もできます。GitHub pageを使えばそのままblogページなるようで、よさそうです。\n準備 構成 win10+wsl2(debian)を使います。win10ではVScodeを使って編集等を行い、hugoをwsl2で動いているdebianにインストールしました。VScodeの拡張機能「remote WSL」を使うとwin10上でdebianファイルを簡単に操作できます。\nまずは、hugoをインストール。\n1 2 3  kaji@DESKTOP-DBHI6DO:~/hugo$ hugo version hugo v0.88.1-5BC54738 linux/amd64 BuildDate=2021-09-04T09:39:19Z VendorInfo=gohugoio kaji@DESKTOP-DBHI6DO:~/hugo$   hugoの設定など 関連ページを参考に、config.tomlを設定すると基本設定は終わりです。\nページの見た目を変更するために、themeを追加します。参考リンクのをそのまま使おうかと思いましたが設定が多いので、簡単そうな「liva hugo」にしました。\nページ作成一連の流れ ページの作成方法は、関連リンクなどにたくさん紹介されています。ざっくりまとめるとこのような感じです。5項以降のhost先は、お好みのところへ。\n win10上のVScodeからページをmarkdownで書く markdownファイルに画像リンクを入れる debian上でhugo publicというフォルダーにhtml,css等が作成される GitHubの該当レポシトリにpublicをまとめてgit push https://(username).github.ioにて公開  使ってみた感想 これまでbloggerを使ってました。WordPressやghostも検討しましたが、hugo+GitHub pageに乗り換えた印象です。あくまでも個人的な直感です。まだ使って1か月も経ちませんが。GUI,markupなど皆さんそれぞれにお好みがありますので。\n メリット  RDB,CMSの管理から開放される httpsの証明書期限を気にしなくても良い 手順をスクリプト化すると、ページの中身に時間を使える   デメリット  最初の一連の構築と手順慣れが必要 コメント等の動的ページは別途サービスをリンクする必要がある    まとめ マニアックネタblogをbloggerからhugo+GitHubへの移行についてまとめました。まだまだ、細かい点の修正終わってませんが、追々進めていきたいと思います。\n参考リンク Releases · gohugoio/hugo\nコピペで作れるHugoでイケてるブログを作る方法 - Qiita\n","permalink":"https://hkaji.github.io/blog/www/01_hugo/","tags":["SSG","hugo"],"title":"SSG hugoってなに"},{"categories":["tsdb"],"contents":"今回は 観測している温度データをちょっと分析して1日と7日平均値を同じグラフに表示させたいと思います。\n環境 esp32にBME280センサーを接続し、node exporter化してあります。別マシンで動いているprometheusから15sサンプリングしています。ちゃんとデータは取れてグラフ表示も問題ありません。\nPromQL prometheusのデータを取り出すのはPromQLというSQLに似た言語です。TSDBに格納されているデータはRDBと違って、一定間隔以外は差分しかありません。しかもバイナリーに圧縮されています。値を取り出すにはPromQLを勉強する必要がありますが、一からすべて勉強する必要はありません。\n公開されているダッシュボードにやりたいことは大抵埋め込まれているます。後は公式docを見ながらアレンジします。\n平均値を計算する 温度データは15s間隔で蓄積されていますが、15sで温度が変わることはそうありません。一日とか週間平均がわかると、今日は平均より暖かいかなとか寒いかなという指標になります。 温度データーは、以下のメトリックスに格納されてます。\n1  BME280_temperature  1日平均を計算するのは\n1  avg_over_time(BME280_temperature[1d])  1週間平均を計算するのは\n1  avg_over_time(BME280_temperature[7d])  のように記載すると表示できます。+queryして3つのグラフを1つのパネルに表示します。 \r\r同じグラフにプロットするとこんな感じです。 \r\rパネルの設定で凡例「Legend」をtableにして「Last(not null)」「Range」を表示させると、1日や1週間の気温差がわかります。\nまとめ 温度センサーの値をちょっと計算して表示させることにより、1日平均や7日平均を可視化できるようになりました。時系列DBの関数はちょっと独自ですが、よく使われる関数は準備されているので一からゴリゴリ書かなくてもいいです。\n参考リンク サンプルで学ぶ！ PromQLで自在にグラフを描こう (Prometheus + Grafana)\n","permalink":"https://hkaji.github.io/blog/tsdb/01_temp_avg/","tags":["prometheus","grafana","promQL","esp32",""],"title":"grafanaでprometheusの値をちょっと計算する"},{"categories":["3Dprinter"],"contents":"今回は 3Dプリンターもサポートの付け方など、ソフトウェアではうまくいってても実際印刷するとあーあになったりということで、経験が必要です。失敗も次につながる良い経験なので、なぜダメなのかをよく考えつつもやってみることが一番重要です。今回は経験値アップのためにdockerロゴを作成しつつ、タイムラプス撮影を試してみます。\n準備 スライスソフトでの準備 dockerロゴのstlファイルはインターネット上に多数共有されていました。自分で楽しむだけなのでライセンスはそう気にしません。しっぽの部分は結構急峻なのでサポート無しだとうまくいかない可能性大です。\n\r\rこのようなサポートをつけ、サポートの充填率は10%と薄めにしておくとはがしやすいです。これでGcode作成しました。\nUSB camaraの準備 USBカメラは、ELECOMの手持ちです。三脚に両面テープで固定してモニターで映り具合を調整します。octoPi側は、「control」画面に動画が映っていることを確認します。\n「timelapse」の画面で撮影間隔等を設定します。今回は10s毎にしましたが、もう少し長くてもいいのかもしれません。この辺は何度かやってみて経験値が必要です。z軸が動くときにという設定もあります。\n印刷 準備が終わればベッドの調整をして印刷です。timelapseは自動的に処理してくれます。\n印刷中\n\r\r印刷完了\n\r\rサポート材も充填率10%したら、簡単にはがすことができました。サポート材の形等パラメーターは重要です。\n\r\rタイムラプスは、でき上がったmp4ファイルに設定情報を加えようと思ったのですが、動画作成ツールが言うこと聞きません。octoPiが作成した動画をそのままYouTubeにアップしました。YouTubeのリンクです。30s程と結構長いです。\nDocker Logo\nまとめ 3Dプリンターの経験値を上げるためにロゴ印刷しました。印刷中のtimelapse撮影も試してみました。設定さえしておけばoctoPiがいい感じにmp4の動画にしてくれます。撮影パラメーターの最適化にはもう少し経験値が必要ようです。\n","permalink":"https://hkaji.github.io/blog/3dprinter/06_timelapse/","tags":["ender3v2","octoprint","timelapse"],"title":"3Dプリンターで立体ロゴの作成とタイムラプスを試す"},{"categories":["3Dprinter"],"contents":"今回は 3Dプリンターの静音化に向けてノズルヘッドに取り掛かります。静音ファンを埋め込むためのヘッド部品を作成し、12V化して静音化を試みます。\nヘッド部品の作成 最近お世話になっているthingiverseから関連ファイルをダウンロードして、スライスします。\n空中部分にサポートを付けないといけないですが、あまり奥まったところにつけるとはがすのが大変なので、形や充填率を調整しながら設定します。スライスソフト上は9hの大作です。\n\r\r熱がかかる部分なのでPLAだと変形の恐れありとアドバイスもらいましたが、ABS樹脂はまだ試していないのでPLAで作ってみます。途中でヘッドスピードを上げながら作成時間6h49mで完成しました。\n\r\rサポート薄くしたつもりですが、ガッツリと引っ付いているのでカッターやラジオペンチで少しずつはがしました。キレイに印刷はできています。\n\r\r\r\rFANは24VなのでDC-DCコンバーターを途中に入れて12Vに降圧します。\nFANの取付 作成した部品にファンを取り付けます。40mm角12Vの静音ファンです。向き間違わないように。\n\r\r\r\r電圧降圧と配線 ファンは12Vなので途中にDC/DCコンバーターを入れて降圧します。制御ボードからヘッドまでの既存配線は抜いて元に戻せるようにしまっておきます。新たに配線して12Vを確認しました。\n\r\rヘッドとファン交換によりもすごく静かになりました。これで、ほぼ静音化作業は終了です。\n\r\rしばらく様子見ながらいろいろと印刷したいと思います。\nまとめ 3Dプリンターの静音化を図るためヘッドを印刷して静音ファンに交換しました。ヘッドは静かになりましたが、風量的にどうなかはしばらく様子を見てみます。何個か印刷してみましたが、PLAヘッドの変形はないようです。\nこれで、電源ユニット、制御ユニットと合わせて交換できるところのファンはすべて交換しました。筐体と共振しているところもあったので、電源は外出しにしたりと一部変更しました。\n当初に比べれば格段に静かになりました。いろいろと変更したので、しばらく様子を見たいと思います。\n","permalink":"https://hkaji.github.io/blog/3dprinter/04_silent03/","tags":["ender3v2","静音化"],"title":"3Dプリンター静音化(その3)...ノズルヘッド編"},{"categories":["3Dprinter"],"contents":"今回は 空きのPi2B+があったので、「OctoPi」をインストールして、3Dプリンターと接続してみました。これまでスライスソフトで作成したGcodeファイルをSDカードを経由して3Dプリンターへ読み込ませていましたが、「OctoPi」を使うことによって、スライスソフトの入ったPCからPi2BのUSBを経由して直接3DプリンターへGcodeファイルを送信できます。SDカード抜き差しの煩雑さから解放されました。\n構成 PCとpi2b、3Dプリンターの接続イメージは、このような感じです。 \r\r準備 pi2b+にoctoPiをインストール 参考リンクにあるimgファイルをダウンロードして、Raspberry Pi imagerやEtcherでSDカードに書き込めば終了です。SDカードは手持ちの8GBです。\nPi2bの電源入れると問題なく立ち上がりWWW serverが自動的に起動してます。avahiが動いているので「http://octopi.local」でアドレスは探してくれます。defaultは、user:pi、pass:raspberryでログインできます。初期設定を適当にすると以下のような画面になります。\n\r\r温度表示に関する修正 以下の機種のfirmwareによっては、温度表示がおかしくなるようで修正手順のとおり作業が必要です。\n Creality Ender 3 v2 Creality CR-6 SE  A firmware update is available to fix this issue.   Creality Ender 3 Pro Creality Ender 5 Pro Creality Ender 6  pi2bと3Dプリンターの接続（ハード） Pi2b側はA、プリンター側はmicroBのUSBケーブルが必要です。設置場所等を考えてケーブル長などを選ぶ必要があります。プリンター側はとくに設定ありません。\noctoPiとプリンターを接続する（ソフト） 画面左側の「connect」ボタンで自動的につながります。Gcodeファイルのuploadやヘッドとノズルの温度状況や設定ができます。印刷中は、Gcode viewerで進捗状況や以降の印刷の状況などを確認できます。\n\r\r\r\r\r印刷 前項にも書きましたが、スライスソフトでGcodeを作成し、画面上のuploadボタンでファイルを選択すればプリンターに送られます。スライスソフトcuraならアドインを入れるとoctoPI経由で直接プリンターにGcodeを送ることもできるようです。\nUSBカメラ 手持ちのUSBカメラを接続してみました。それなりに撮影できそうです。各腫設定があるので、これは別途まとめたいと思います。\n\r\rまとめ Pi2bにインストールしたoctoPiと3Dプリンターとを接続することにより、SDカードでのファイル交換が不要となり、利便性が向上しました。さらにPi2BにWebカメラを接続することにより印刷中の動画撮影もできるようなので、ひきつづき機能確認していきたいと思います。\n参考リンク OctoPrint.org\nOctoPrint doesn\u0026rsquo;t show a temperature graph for my Creality printer with stock firmware\n","permalink":"https://hkaji.github.io/blog/3dprinter/05_octoprint/","tags":["ender3v2","octoprint"],"title":"octoPi install...これはいい感じですSDカード経由から解放されました"},{"categories":["etc"],"contents":"今回は pi4bのswap容量を変更する。\n経緯 pi4bを使ってdockerの監視を継続してました。夜中の0時で止まっていたことがあり、メモリーを食って、100MBのswapがすべて使われているという症状でした。\nswap容量を100MB→1GBに変更して、引き続き連続監視をしてみます。\nswap容量の変更は 参考リンクのとおり簡単です。\nまずは、現状を確認します。\n1 2 3 4  pi@pi4b:~ $ swapon -s Filename Type Size Used Priority /var/swap file 102396 102396 -2 pi@pi4b:~ $   約100MBです。\nswapを管理しているサービスを停止して、設定ファイルを変更します。\n1  pi@pi4b:~ $ sudo service dphys-swapfile stop   このファイルを変更します。\n1 2 3 4 5  $ sudo vim /etc/dphys-swapfile CONF_SWAPSIZE=100 ↓ CONF_SWAPSIZE=1024   サービスを起動します。\n1  pi@pi4b:~ $ sudo service dphys-swapfile start   swap容量を確認します。\n1 2 3 4  pi@pi4b:~ $ swapon -s Filename Type Size Used Priority /var/swap file 1048572 0 -2 pi@pi4b:~ $   約1GBに増えてます。\n今回のまとめ pi4bのswap容量を100MBから1GBへ増やしました。\n参考リンク Raspberry PiのSwapファイルの容量を変更する\n","permalink":"https://hkaji.github.io/blog/etc/01_pi4b_swap/","tags":["pi4b"],"title":"pi4b swapの容量変更"},{"categories":["3Dprinter"],"contents":"今回は 3Dプリンターの静音化に向けて部品を作成したので、電源ユニットと制御ユニットの静音ファン交換や配線をします。\n静音ファン取付など 3Dプリンター本体下部の各ネジを外してユニットをばらします。作成した静音ファン用の部品に静音ファンを取り付けます。ネジ穴の位置はばっちりでした。\n電源ユニット\n\r\r制御ユニット\n\r\r電源ユニットはもともと12Vなのでプラスマイナス間違わないように配線して納めれば終了です。制御ユニットは、24Vなので降圧変換器を間に入れて12Vに降圧します。\n\r\r左が入力、右が出力です。とくに設定はありませんが7seg上の青い部品の小さなネジが可変抵抗で細部の出力電圧を調整できます。最初は11Vだったので調整して12Vにしました。7seg左のボタンは、入力と出力電圧表示の切り替え、右のボタンは出力のon/offです。\nファンの厚み分底上げしないといけないので、四隅の両面テープで止めてあるゴムをはがして、印刷して作成した高さ38mmの足をXレールにはめます。印刷精度でレールにはまりにくいので、向きはバラバラです。10mmの板ゴムを切って準備しておいたのですが、別途作成しなくてもはがしたゴムをそのまま流用すればよかったです。\nということで2つのユニットの静音化作業は完了しました。\n\r\r\r\rお試し印刷してみます。制御ユニットのファンは、動いている？くらい静かになりました。電源ユニットは、少し静かになりましたが静音とまでは程遠い感じです。配線等は当たっていないので、ファン自体がうるさいようです。しばらくこれで使ってみて、風量が十分で静かなファンを探したいと思います。\n今回のまとめ 電源ユニットと制御ユニットのファンを静音化しましたが、電源ユニットのファンはまだちょっとうるさいです。引き続き静音化続きます。材料を熱しているヘッドユニットにもファンがあるので、そちらも静音化したいと思います。\n参考リンク Ender3 V2本格静音化MOD　メインボード・PSU・ホットエンド・造形物冷却用4つの騒音ファンを静音ファンに交換\n","permalink":"https://hkaji.github.io/blog/3dprinter/03_silent02/","tags":["ender3v2","静音化"],"title":"3D printer静音化(その2)...電源・ボード編"},{"categories":["3Dprinter"],"contents":"今回は 購入して初期確認まで終わった3Dプリンターですが、各種ファンがうるさいです。早速、魔改造の沼に入っていきたいと思います。\nとりあえず分解してみた ファンは4つあります。\n ホットエンド冷却用 造形物冷却用 メインボード冷却用 電源冷却用  電源は12V、その他は24Vです。静音ファンは基本12V動作なので24Vの配線はDC-DCコンバーターで12Vへ降圧します。\n本体の裏側を覗くとこのようになってます。左側が電源ユニット、右側がメインボードです。それぞれ60mmのうるさいファンがついています。\n\r\rさらに電源ユニットを開けてみると、このような感じです。\n\r\rこの60mmファンを静音化します。風量は確保するためファンを大きくして回転数の小さいものに交換します。他の部品と干渉するので電源ユニットに外付けです。ファンの厚みと空気を吸い込む分、3Dプリンターの足に下駄履かさないといけません。先人が38mmと45mmの下駄ファイルを作ってくれてました。\nEnder 3 v2 Feet Riser - 38mm/45mm total clearance by squirrelf\n80mm角ファン用の蓋もファイルがあります。これは印刷に10数時間かかるようです。\nEnder 3 V2 PSU cover with 80mm fan by mpuromaki\n必要な材料は 参考リンクに必要な材料があるのでその通りAmazonでぽち。ざっくり以下のとおりです。\n DC-DCコンバーター(24V→12V) × 3 8cm角静音ファン × 2 4cm角静音ファン × 2  電源用はデフォルト12V、その他は24Vを12Vに降圧して静音ファンを動かします。\n必要な部材は、このとおり到着済みです。静音化追加費用0.8諭吉です。\n\r\rDC-DC変換器は、市販のこれです。左の入力端子に直流24Vを入力して左下のmodeスイッチを押すと出力電圧を入力電圧-2V~1.25Vまで変更できて、右の端子から降圧された直流が出力されるようです。\n\r\r1,000円/個程度でした。出力電圧が表示されます。変換器を入れてレールに止めるカバーを作成しました。先人が設計したstlファイルをthingiverseからダウンロードして、スライスソフトでGcodeに変換して印刷すればできます。印刷の練習を兼ねて3個分作りました。\n\r\r\r\rスライスソフトの密着性やサポート設定を変更しながら印刷しました。積層途中が空中になる部分はサポート入れないとうまくできないし、サポート入れるとはがすのが大変です。この辺は、設定と仕上がりを見ながら経験値を積まないとよい解決策は生まれません。\n今日のまとめ 3Dプリンターの静音化に向けて、一番うるさい電源ユニットの配線確認や関連する部品の作成を行いました。引き続き、ファン交換作業を進めて魔改造静音化を進めたいと思います。\n参考リンク Ender3 V2本格静音化MOD　メインボード・PSU・ホットエンド・造形物冷却用4つの騒音ファンを静音ファンに交換\n","permalink":"https://hkaji.github.io/blog/3dprinter/02_silent01/","tags":["ender3v2","静音化"],"title":"3Dプリンター静音化(その1)"},{"categories":["3Dprinter"],"contents":"今回は 机回りを整理してレイアウト変更とサイドテーブルを作成し、3Dプリンターの設置場所を確保しました。熱整形タイプの3Dプリンターを購入したのでそのまとめです。\n組立 3Dプリンターは、CREALITY Ender3V2を購入しました。お値段は、Amazonで5千円クーポンを使って3.5諭吉程でした。グレーのフィラメントも同時購入してこのような荷姿で届きます。\n\r\r本体の下半分は完成した形ですが、上半分は組立が必要です。付属の組立説明書だけではたぶん完成しません。YouTubeに多数の先人が組立動画をアップされているので参考にした方がスムーズに組立ができます。約2hかかりました。工具は付属されているもので問題ありません。\n\r\r組立終わったら、材料が出てくるノズルとベッドのレベルを調整します。Zero pointにノズルを持ってきて、adjust modeにするとステッピングモーターがフリーになります。ベッド下部の四隅にある調整ネジを回して、ベッドとノズルの隙間を紙1枚程度に調整します。\n組立時に注意するポイント  Z軸のストップセンサーは、ベッドより上の高さでSW ONになると材料がベッドに届かなくなるので、取付場所の調整が重要です。 枠組みの長さやネジ位置の精度は出ている感じですが、全体的に組み立てた最後にネジを本締めしたほうが組み立てやすいです。  お試しプリント 内包されていたSDカードにサンプルがあったので「dog」というのを印刷してみました。3cm四方程度の大きさですが50分程かかります。曲面も意外にスムーズな仕上がりです。\n\r\rCADソフトと仕上がりが同じなのかテストするサンプルもあるようなので追々試していきたいと思います。\nスライサーソフト 3D CADソフトでモデルを作ってSTLというファイルを吐き出します。そのファイルでは3Dプリンターは動かないので、Gcodeに変換するため、スライサーソフトを使って変換します。参考リンクのCuraと言うソフトを使いました。先人も多数です。\n今日のまとめ 3Dプリンターを購入し、組み立てお試しプリントまでやってみました。まだまだCADの使い方やパラメーター調整等いろいろとやっていかないといけませんが、非常に楽しいアイテムです。\n関連リンク Ultimaker Cura：強力で使いやすい3Dプリントソフトウェア | Ultimaker\n","permalink":"https://hkaji.github.io/blog/3dprinter/01_hajime/","tags":["ender3v2"],"title":"3Dプリンターがやってきた"},{"categories":["etc"],"contents":"test 最初の試験投稿\n試験 投稿試験\n","permalink":"https://hkaji.github.io/blog/etc/test/","tags":["tag test"],"title":"Test"},{"categories":["raspi"],"contents":"倒立振子実現のために、事前確認です。\nDCモーターコントローラーは、東芝製のTA7921Pを使用してます。 こちらに詳しく説明とサンプルがあります。 https://www.marutsu.co.jp/contents/shop/marutsu/mame/81.html\n回転方向の制御に2線、回転速度の制御に1線を使用します。 ESP32側は、回転方向制御に1,0をそれぞれ出力してあげれば問題ありません。 回転制御は、アナログ出力はないのでPWM出力をアナログ出力とみなして制御します。 周波数は、500Hzから1kHzがいいようです。 デューティー比を0(0%)～1023(100%)まで変化させると擬似的にアナログ出力となります。 デューティー比は、0→1→10→100→500→1000と変化させた時のモータの動きです。\n  デューティ比0,1,10ではモーターは動きません。 PWM信号にLEDをつけてます。段々明るくなっている状況がわかると思います。\nもう1個のモーターも配線を半田付けして、モーターコントローラーと配線します。 \r\r反対側を見ながらコピーすればいいので簡単です。プログラムを反対側分も作成し、いざテスト。 うーん、新しく配線したモーターは、うんともすんとも動きません。反対側は問題なく回ってます。 再度、配線を見直しても間違ってません。 配線触ってると、モーター動き出しました。原因はここ。 \r\rモーターコントローラーのVCC線の剥き方が気持ち短くて、ブレッドボードと微妙に接触不良です。長めに剥いて配線しなおすと、左右同じように動くようになりました。   これで、左右のモータが動くようになりました。将来的な拡張を考えて左右個別にコントロールできるようにしてあります。\nあとは、これまでのセンサー読み出し、モーター駆動等の個別コードをまとめて、倒立できるようにプログラムの作成です。 基板に取り付けて、ようやく倒立実験です。GW中は楽しめそうです。\n","permalink":"https://hkaji.github.io/blog/raspi/30_dc_motor/","tags":["esp32","DC motor","arduino","TA7921P","倒立振子"],"title":"2年目のラズパイ日記...20日目..DCモーターコントロール"},{"categories":["raspi"],"contents":"倒立振子のためにESP32をもう1個買いました。 \r\rあわせて片側6穴のブレッドボードも購入です。これで両側に配線が可能です。 \r\r左が新規購入した6穴、右がこれまで使ってた5穴です。5穴だとESP32の横幅が収まらずどちらかサイドのピンが使えなくなります。\nあとは、ArduinoIDEの新しいのは、シリアルデータをグラフにしてくれる機能があるようで、1.6.4から1.8.9にアップデートしました。 \r\rシリアルプロット試してみました。シリアルモニターからコマンド打って、シリアルにCSVデータが出力する状態でシリアルモニターをクローズして、シリアルプロットを立ち上げます。シリアルモニターとシリアルプロットは同時オープンできません。データ毎に色を変えてグラフにしてくれました。 加速度のx,y,z、ジャイロのx,y,xの6軸の状況です。センサーをx方向y方向に動かすと、それなりに反映されている感じです。\n新規購入したESP32にもmicropythonを入れて、センサーを移し変えて配線をし直します。pythonコードもそのままコピーしてやれやれと思ったら、センサー情報が出力されず謎のエラーがでます。いろいろと確認したらI2CのSDA、SCLが逆になってました。 確認したつもりが、見直すと誤配線。配線は、少し間を置いて気分をリフレッシュしながら何度も要確認です。 \r\rモーター回路にも接続してモーター回ることを確認します。こちらは問題ありませんでした。 \r\rということで、9軸センサーとDCモータードライバーの配線は新しいESP32へ引越し終わりました。\nセンサーは、1方向の加速度とジャイロしか使わないので、x軸のみ加速度とジャイロ出力をグラフに出力して見てみます。 \r\r傾きが青線、加速度が赤線です。傾きにあわせて青線が動きます。早く動かすと赤線が上昇し、ゆっくり動かすと加速度は動きません。赤線は、微妙にオフセットされているので、これも補正しないとですね。 あとは、動かさなくても値が微妙に変化するので、感度を調整するか、制御ソフトで取捨選択するか考えないといけません。\n","permalink":"https://hkaji.github.io/blog/raspi/29_9axies/","tags":["esp32","倒立振子","arduino"],"title":"2年目のラズパイ日記...19日目...9軸センサ(その3)"},{"categories":["raspi"],"contents":"モーター系のお勉強ということで、倒立振子作ってみます。 https://ja.wikipedia.org/wiki/%E5%80%92%E7%AB%8B%E6%8C%AF%E5%AD%90\nDCモーターを9軸センサーの2軸を使って制御します。 水曜日ポチッておいたのが届きました。 \r\rタミヤのダブルギヤセット（モーター2個付）や基板にタイヤ、 DCモーターの制御はTA7291Pで行います。 \r\rモーターの電源はエネループ（単3）×3がよろしいようです。エネループの単3は1本約1.2Vの出力です。モーター入力定格がMax3V、コントローラーの損失が約2Vあります。 エネループ1.2V×3→3.6Vでコントローラー損失が2Vということで、モーターは1.6V駆動となります。トルクが足りないときは、エネループ1本追加です。 \r\r先人の知恵としてこの辺のページが参考になります。 TA7921pの説明はこちら。 https://www.marutsu.co.jp/contents/shop/marutsu/mame/81.html 半日でつくる倒立振子というナイスな先人もいます。 https://www.instructables.com/id/%E5%8D%8A%E6%97%A5%E3%81%A7%E4%BD%9C%E3%82%8B%E5%80%92%E7%AB%8B%E6%8C%AF%E5%AD%90/\n倒立振子の運動方程式とか状態方程式は、ググルとたくさん出てきます。 制御工学実装の基本のようで、いろいろな制御方法があります。\nまずは、モーター単体を回転させるべく、配線等を行います。 ESP32からは、3本必要です。\n1 2 3  IO2　PWM出力　モータ速度コントロール IO22 0,1出力（正転、逆転、ブレーキ） IO23　0,1出力（正転、逆転、ブレーキ）   全体はこんな感じです。ESP32はもう1個買って専用にしないとだめですね。 \r\rDCモーターコントローラーは、こんな感じです。配線はまだ片側だけです。 \r\r写真下側電源ラインにESP32からの5V（赤線）を、上側の電源ラインに電池からの線（オレンジ線）を接続して、電源を分離してます。GNDは共通です。 \r\rとりあえず勢いよくモーターが回ることを確認しました。 早すぎてわからないので、ギヤボックスを入れます。ギヤ比は114.7:1を選択しました。\n正回転と逆回転を3回繰り返します。   ","permalink":"https://hkaji.github.io/blog/raspi/28_touritsu/","tags":["倒立振子"],"title":"2年目のラズパイ日記...18日目...倒立振子始動"},{"categories":["raspi"],"contents":"9軸センサーの続きです。 前回積み残しの地磁気センサー値をESP32へ読み込みます。 BMM050.pyというライブラリを読み込んで、I2Cアドレス0x19へアクセスすると読み出してくれます。 \r\rこれで9軸読み出せることは確認できました。\nセンサー情報をWindowsの画面にリアルタイムでグラフ化してくれそうなソフトがありました。無料で使えそうです。 シリアルから送られてくるcsvテキストをグラフに書いてくれるようです。 http://www.lapis-semi.com/lazurite-jp/lazurite/1499.html\nこのソフトにあわせるように出力を整形します。 \r\r各行の最初に「STX」、終わりに「ETX」をつけるそうです。シリアルモニターで出力を確認してます。とりあえず加速度の3軸のみです。\nlazuriteGraphというので読み込みます。画面設定はこんな感じです。 \r\rCOMポートには先ほどの値が出力され続けているので、グラフをみると \r\rなぜか書いてくれません。うーん、とりあえずこのままで、またの機会に考えます。 何事もうまくいくとは限りません。\n","permalink":"https://hkaji.github.io/blog/raspi/27_esp32_9axis/","tags":["esp32","BMX055"],"title":"2年目のラズパイ日記...17日目...9軸センサー(その2)"},{"categories":["raspi"],"contents":"師匠に触発されて、9軸センサー購入しました。\n動き系のセンサーは、どんなものか調べてみるのと、動力系と合わせて倒立振子をつくってみようと思ってます。 どんなものかは、YouTubeにたくさん出てます。\nセンサー情報を元にモーターを制御するのはいろいろと難しい感じですが、結構サンプルもあるのでなんとかなりそうな感じです。目に見えて動くものはわかりやすいのでお勉強にはよろしいかと。\n購入したのはBOSCH社BMX055です。めちゃくちゃ小さいです。3つ並んだ真ん中のチップに3つのセンサーが入ってます。他は電源レギュレータと信号線のレベル変換器です。 \r\rI2Cのアドレスや駆動電圧により、ジャンパーが必要です。 JP1,JP2,JP3はすべてオープンのため、I2Cアドレスは以下のとおりです。\n1 2 3  加速度 0x19 ジャイロ 0x69 磁気 0x13   JP6オープン、J7ショート、J8オープンとして、電源は3.3V信号レベルを3.3Vに設定しました。J7は基盤の裏面を半田でジャンパーします。写真わかりにくいですがAEの右上を半田でジャンパーしてます。 \r\rESP32ボードはこんな感じでいろいろと乗っかってます。 \r\r動作確認はMicroPythonで実施します。先人の知恵をGitHubで見つけました。 すんなりいくかと思えばそうはいかずです。 Pybordで動いたコードのようで、ちょっと修正が必要です。 センサーは、I2Cアドレス3つでそれぞれ読み出さないといけないので、加速度、ジャイロ、地磁気センサーそれぞれを1つのデバイスに入れた感じです。 コードもそのようになっていて、センサー毎ライブラリーになってました。\nこちらを参考に https://github.com/micropython-IMU/micropython-bmx055\n1 2 3  bma2x2.py → 加速度センサ bmg160.py → ジャイロセンサ bmm050.py → 地磁気センサ   それぞれがライブラリになっていて、importで読み込む必要があります。\n今日のところは、加速度とジャイロを読み取れるところまでできました。 uPyCraftの画面キャプチャーです。黄色枠に加速度の3軸(x,y,z)、ジャイロの3軸(x,y,z)計6個の値を0.5秒毎にESP32が読み取って表示しています。 \r\r地磁気は次回に。 この値だけではよくわからないので、時間変化とともにわかるように可視化も必要です。センサー動かさなくても値が微妙に変わっているので、感度の調整や値の補正も必要なのかもです。 シリアルにセンサー情報をprintするためのpythonコードです。いろいろといらない部分もありますが。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  # BOSCH bmx055 sensor # bma2x2.py bmg160.py が必要 from machine import Pin, I2C from bma2x2 import BMA2X2 from bmg160 import BMG160 import time i2cBMX055 = I2C(scl=Pin(4), sda=Pin(5)) print(\u0026#39;I2C setup\u0026#39;) accl=BMA2X2(i2cBMX055, 0x19) gyro=BMG160(i2cBMX055, 0x69) # accl sensor print(\u0026#39;accl.Range=\u0026#39;,BMA2X2.get_range(accl)) print(\u0026#39;accl.Filter_bw=\u0026#39;,BMA2X2.get_filter_bw(accl)) time.sleep(1) # gyro sensor # BMG160.get_filter_bwは読めない。timing? print(\u0026#39;gyro.Range=\u0026#39;,BMG160.get_range(gyro)) #print(\u0026#39;o.filter_bw=\u0026#39;,BMG160.get_filter_bw(gyro)) while True: print(\u0026#39;accl:\u0026#39;,BMA2X2.xyz(accl),\u0026#39;gyro\u0026#39;,BMG160.xyz(gyro)) time.sleep(0.5)   ","permalink":"https://hkaji.github.io/blog/raspi/26_esp32_9axis/","tags":["esp32","BMX055"],"title":"2年目のラズパイ日記...16日目...9軸センサー"},{"categories":["raspi"],"contents":"引き続きESP32です。BOSCH製の温湿度・気圧センサーBME280を接続して値を読み込み、先週のOLEDに表示するまでを頑張ります。\nBME280は、秋月で買うと1,080円です。海外通販だと2-300円だそうです。送られてくるまで日数はかかるそうですが。 上位機種のBME680というのもあり3項目に加えて空気中のガス濃度を測定してくれます。\nBME280は、ラズパイに接続しAmbientのクラウドへ値を15分周期で送るのに使ってます。linuxでの設定は結構簡単だった記憶です。\nBME280のドライバーは先人の知恵をいただきます。 https://github.com/catdog2/mpy_bme280_esp8266/blob/master/bme280.py\n参考ページは、この辺で https://qiita.com/tshimizu8/items/e64e1af656b3b00a92d9\nI2C接続のマスターはESP32なのでスレーブ側のセンサー等はバス接続でSCLとSDAの2線を共通にどんどん接続できます。 ただし、I2Cアドレスが競合するとよくないので、その辺はそれぞれのデバイスのデーターシートをよく確認する必要があります。\nBM280の接続は、以下のとおりです。\n1 2 3 4 5 6  1pin VDD 2pin GND 3pin CSB→VDD　チップセレクトとありますが、I2Cは関係ないそうです。 4pin SDA 5pin SDO→GND　I2C ADDR 0x76になります 6pin SCL   いきなり成果写真になってますが、BME280はOLEDの隣に設置し、SDAとSCLをOLEDを経由してバス接続で延ばして接続します。 \r\rOLEDにセンサーから読み取った温度、湿度、気圧が30秒更新され表示されてます。 \r\r母艦PCのuPyCraftの通信状況部分にも確認のためprint文で表示させ、OLEDの表示とあってるか確認しました。モニター画面反射してますがすいません。 \r\rOLEDの日本語化とか最新データのグラフ化とか使い方はまだまだあります。 pythonコードは、以下のとおりです。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  # BME280 sensor I2C + oled import machine, time import bme280, ssd1306 i2cBME280 = machine.I2C(scl=machine.Pin(4), sda=machine.Pin(5)) bme = bme280.BME280(i2c=i2cBME280) #i2cSSD1306 = machine.I2C(scl=machine.Pin(4), sda=machine.Pin(5)) oled = ssd1306.SSD1306_I2C(128, 64, i2cBME280) while True: sensorString = bme.values print(sensorString) oled.text(sensorString[0], 0, 0) oled.text(sensorString[2], 0, 10) oled.text(sensorString[1], 0, 20) oled.text(\u0026#39;BME280 on SSD1306\u0026#39;, 0, 50) oled.show() time.sleep(30)   ","permalink":"https://hkaji.github.io/blog/raspi/25_esp32_bme280/","tags":["esp32","BME280","SSD1306"],"title":"2年目のラズパイ15日目...ESP32+BME280"},{"categories":["raspi"],"contents":"ESP32続きます。\n今日は仕事帰りに買ってきた大きなブレッドボードにESP32を引越しして、 OLED（SSD1306）の表示を頑張ります。\nOLEDとは、Organic Light Emitting Diodeの略称で、日本語で言うと有機ELダイオードでしょうか。最近は、テレビなどにも使われています。数年前までは、大きさや寿命、製造コスト等いろいろと問題ありでしたが、ようやく製品に採用されています。 液晶に比べて発色が綺麗とかバックライトがいらない等メリットは多いようです。\nちなみに購入したOLEDは、580円でした。\nまずはブレッドボードの引越しです。センサーやOLED等配線すると狭くなってきたので。 こちらから \r\rこちらへ \r\rこれで、接続して配線できるエリアが広がりました。もう2列くらい幅があるといいのですが。\n次にOLEDです。参考にしたページはこちら。 https://qiita.com/inachi/items/ceb3e8e12022a7cbdf7b\n接続は配線少ないI2Cで行います。 VCC,GNDとSCL→IO4,SDA→IO5へ接続します。VCCは、3.3Vで大丈夫なようです。データシートには、Logic3.3V-5V、表示部7V-15Vとありましたが。\npythonのライブラリーは、先人の知恵を拝借します。 https://github.com/micropython/micropython/blob/master/drivers/display/ssd1306.py\nこれで準備完了です。uPyCraftでまずはライブラリーをアップロードします。 \r\r①で状況確認できます。②の領域でファイルの中身の確認、③はシリアルコンソールでここからコマンドも入力できます。④でファイルアップロードと実行がワンクリックです。 Teratermでコマンドたたくと結構大変ですが、この統合環境は優れものです。中華ものですが。\nまずは、英数字の表示です。結構簡単です。参考ページのコードをそのままたたくと表示されました。日本語は、フォントを入れると表示できるそうですが、そこはまた次回ということで。\n\r\r\r\r\rサンプルの3D CUBEは、サンプルコードそのままで問題なく動きました。   ","permalink":"https://hkaji.github.io/blog/raspi/24_esp32_oled/","tags":["esp32","SSD1306"],"title":"2年目のラズパイ...14日目...ESP32+OLED"},{"categories":["raspi"],"contents":"ESP32ですが、micropythonが動くように環境整備が終りました。\n手始めに基本のLチカです。 \r\rブレッドボードのGNDとESP32のGNDを青線で接続し、ESP32の IO02とGND間に抵抗入りLEDを接続します。 これでIO02の出力を変化させると、LEDがON/OFFするはずです。\npythonコードはこちら。\n1 2 3 4 5 6 7 8 9 10  import machine import time pin = machine.Pin(2, machine.Pin.OUT) for i in range(10): pin.value(0) time.sleep(0.1) pin.value(1) time.sleep(0.1)   しかし、LEDがうんともすんとも光りません。\npythonコードとIOピンの番号が違うのかとdatasheetを見直したり、WWWを調べたりといきなりつまずいてます。「故障探求は下位レイヤーから」が基本です。 わかってしまえばなんだなのですが、青線でESP32とブレッドボードのGNDラインを接続しているのですが、ブレッドボード側が接触悪く、皮膜を剥き直して指し直すと問題なくLEDは点滅しました。 動画はこんな感じです。   引き続き、PWMでもわっと光らせてみます。 コードは、こちら。\n1 2 3 4 5 6 7 8 9 10 11 12 13  import time import machine pwm = machine.PWM(machine.Pin(2)) # この数字が出力Pin番号 pwm.freq(60) while True: for i in range(1024): pwm.duty(i) time.sleep(0.001) for i in range(1023, -1, -1): pwm.duty(i) time.sleep(0.001)   こちらの動画はこんな感じです。ちょっと周期が早くてわかりづらいですが。   母艦PCとESP32間は、USBケーブルで接続します。ソフトは、TeraTerｍでチコチココマンドたたくのもいいのですが、uPyCraftというのを使うとESP32へのファイル転送やpythonコードの実行を簡単に行えます。\n","permalink":"https://hkaji.github.io/blog/raspi/23_esp32_led/","tags":["esp32","Lチカ"],"title":"2年目のラズパイ...13日目...ESP32でLチカ"},{"categories":["raspi"],"contents":"秋月で買ったものの長らく手付かずだったESP32ですが、始動します。 \r\r確か1,500円くらいだった記憶です。こちらです。 「ESP32」「micropython」というキーワードで先人の知恵を探します。 とりあえず、この辺が参考になるかと\nhttp://www.zikko.net/micom/?p=152\nESP32のFlashを書き換えるツール\nhttps://www.espressif.com/en/support/download/other-tools?keys=\u0026amp;field_type_tid%5B%5D=13\nその前にCP210xというUSB-Serial変換するドライバーが必要だそうです。\nhttps://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers　ドライバー入れるとCOM7にて認識されました。 上記のFlash書き換えツールでバイナリーを書き換えます。 \r\r一番下の緑のバーが左から右へ進んで書き込み状況を表してます。 1分くらいかかります。書き込みは0x1000からと、おまじないがあります。\nUSBケーブルを再接続してリセットしてから、TeraTermでCOM7をたたいてみると \r\rMicroPythonのターミナルが表示されており、環境はインストール完了です。 毎回シリアルでプログラムを書き込むのが面倒なので、便利なツールがあるようです。 「uPyCraft」というのが、Win,mac,unix用それぞれあります。\n秋月で売ってるDEvkitCのpin配置はこちら。 \r\r","permalink":"https://hkaji.github.io/blog/raspi/22_esp32/","tags":["esp32"],"title":"2年目のラズパイ...12日目...ESP32始動"},{"categories":["raspi"],"contents":"久しぶりの更新です。\nラズパイでradikoを聞こえるようにしました。\n家のPCは、10年ほど前に購入したDELLのセットもの。 CPUはceleron2.2GHzにMemは4GBと当時はそこそこでしたが、 WWW調べてラジオ聞いてTeraTermでラズパイをたたいてとやってると、ラジオの音が途切れます。 \r\rこちらのラズパイは、机の上に常時置いてあり電源ONになってます。半年以上温度+湿度+気圧を15分毎に測定して、Ambientのサーバーにデーターを送っています。 それにしか使っていないので、恒常的な負荷はかかってません。\n参考にしたのはこちら。\nhttp://d.hatena.ne.jp/zariganitosh/20130124/rtmpdump_radiko_access\nいろいろと先人が開拓してます。 ラジコの仕様が変わるたびに追従する必要があります。\nとりあえず\n1 2  #apt-get update #apt-get upgrade   で、ライブラリ等を最新版に。\nradiko.shというのが転がっているのでそれをget。 ただし、radikoの前の仕様のものがほとんどなので、10箇所ほど修正が必要です。 修正したものを最下部へ張っておきます。\n関連リンクを参考に必要なpkgやlibをインストールすれば、問題なく動きます。\n1  #radiko.sh FMJ   これでJ-WaveがストリーミングされオーディオジャックかHDMIいずれかへ出力します。デフォルトautoで認識してくれます。 \r\r自宅では、HDMI接続でAVアンプに接続してます。\nここからradiko.sh修正版\nbin/bash  # https://gist.github.com/matchy2/3956266 を若干修正 if [ $# -eq 1 ]; then channel=$1 else echo \u0026#34;usage : $0channel_name\u0026#34; echo \u0026#34; channel_name list\u0026#34; echo \u0026#34; TBS Radio: TBS\u0026#34; echo \u0026#34; Nippon Cultural Broadcasting: QRR\u0026#34; echo \u0026#34; Nippon Broadcasting: LFR\u0026#34; echo \u0026#34; Radio Nippon: JORF\u0026#34; echo \u0026#34; Inter FM: INT\u0026#34; echo \u0026#34; Tokyo FM: FMT\u0026#34; echo \u0026#34; J-WAVE: FMJ\u0026#34; echo \u0026#34; bayfm 78.0MHz: BAYFM78\u0026#34; echo \u0026#34; NACK5: NACK5\u0026#34; echo \u0026#34; FM yokohama 84.7: YFM\u0026#34; exit 1 fi # # parameter setting # pid=$$ date=`date \u0026#39;+%Y-%m-%d-%H:%M\u0026#39;` playerurl=http://radiko.jp/apps/js/flash/myplayer-release.swf outdir=\u0026#34;/home/pi/radiko\u0026#34; playerfile=\u0026#34;${outdir}/player.swf\u0026#34; keyfile=\u0026#34;${outdir}/authkey.png\u0026#34; auth1_fms_file=\u0026#34;${outdir}/auth1_fms_${pid}\u0026#34; auth2_fms_file=\u0026#34;${outdir}/auth2_fms_${pid}\u0026#34; channel_file=\u0026#34;${outdir}/${channel}.xml\u0026#34; mkdir -p ${outdir} # # get player # if [ ! -f $playerfile ]; then wget -q -O $playerfile $playerurl if [ $? -ne 0 ]; then echo \u0026#34;failed to get player\u0026#34; exit 1 fi fi # # parameter setting # pid=$$ date=`date \u0026#39;+%Y-%m-%d-%H:%M\u0026#39;` playerurl=http://radiko.jp/apps/js/flash/myplayer-release.swf outdir=\u0026#34;/home/pi/radiko\u0026#34; playerfile=\u0026#34;${outdir}/player.swf\u0026#34; keyfile=\u0026#34;${outdir}/authkey.png\u0026#34; auth1_fms_file=\u0026#34;${outdir}/auth1_fms_${pid}\u0026#34; auth2_fms_file=\u0026#34;${outdir}/auth2_fms_${pid}\u0026#34; channel_file=\u0026#34;${outdir}/${channel}.xml\u0026#34; mkdir -p ${outdir} # # get player # if [ ! -f $playerfile ]; then wget -q -O $playerfile $playerurl if [ $? -ne 0 ]; then echo \u0026#34;failed to get player\u0026#34; exit 1 fi fi # # get keydata (need swftool) # if [ ! -f $keyfile ]; then swfextract -b 12 $playerfile -o $keyfile if [ ! -f $keyfile ]; then echo \u0026#34;failed to get keydata\u0026#34; exit 1 fi fi if [ -f ${auth1_fms_file} ]; then rm -f ${auth1_fms_file} fi # # access auth1_fms # wget -q \\  --header=\u0026#34;pragma: no-cache\u0026#34; \\  --header=\u0026#34;X-Radiko-App: pc_ts\u0026#34; \\  --header=\u0026#34;X-Radiko-App-Version: 4.0.1\u0026#34; \\  --header=\u0026#34;X-Radiko-User: test-stream\u0026#34; \\  --header=\u0026#34;X-Radiko-Device: pc\u0026#34; \\  --post-data=\u0026#39;\\r\\n\u0026#39; \\  --no-check-certificate \\  --save-headers \\  -O ${auth1_fms_file} \\  https://radiko.jp/v2/api/auth1_fms if [ $? -ne 0 ]; then echo \u0026#34;failed auth1 process\u0026#34; exit 1 fi # # get partial key # authtoken=`perl -ne \u0026#39;print $1 if(/x-radiko-authtoken: ([\\w-]+)/i)\u0026#39; ${auth1_fms_file}` offset=`perl -ne \u0026#39;print $1 if(/x-radiko-keyoffset: (\\d+)/i)\u0026#39; ${auth1_fms_file}` length=`perl -ne \u0026#39;print $1 if(/x-radiko-keylength: (\\d+)/i)\u0026#39; ${auth1_fms_file}` partialkey=`dd if=$keyfile bs=1 skip=${offset} count=${length} 2\u0026gt; /dev/null | base64` echo \u0026#34;authtoken: ${authtoken}\\noffset: ${offset}length: ${length}\\npartialkey: $partialkey\u0026#34; rm -f ${auth1_fms_file} if [ -f ${auth2_fms_file} ]; then rm -f ${auth2_fms_file} fi # # access auth2_fms # wget -q \\  --header=\u0026#34;pragma: no-cache\u0026#34; \\  --header=\u0026#34;X-Radiko-App: pc_ts\u0026#34; \\  --header=\u0026#34;X-Radiko-App-Version: 4.0.1\u0026#34; \\  --header=\u0026#34;X-Radiko-User: test-stream\u0026#34; \\  --header=\u0026#34;X-Radiko-Device: pc\u0026#34; \\  --header=\u0026#34;X-Radiko-AuthToken: ${authtoken}\u0026#34; \\  --header=\u0026#34;X-Radiko-PartialKey: ${partialkey}\u0026#34; \\  --post-data=\u0026#39;\\r\\n\u0026#39; \\  --no-check-certificate \\  -O ${auth2_fms_file} \\  https://radiko.jp/v2/api/auth2_fms if [ $? -ne 0 -o ! -f ${auth2_fms_file} ]; then echo \u0026#34;failed auth2 process\u0026#34; exit 1 fi echo \u0026#34;authentication success\u0026#34; areaid=`perl -ne \u0026#39;print $1 if(/^([^,]+),/i)\u0026#39; ${auth2_fms_file}` echo \u0026#34;areaid: $areaid\u0026#34; rm -f ${auth2_fms_file} # # get stream-url # if [ -f ${channel_file} ]; then rm -f ${channel_file} fi wget -q \u0026#34;http://radiko.jp/v2/station/stream/${channel}.xml\u0026#34; -O ${channel_file} stream_url=`echo \u0026#34;cat /url/item[1]/text()\u0026#34; | xmllint --shell ${channel_file} | tail -2 | head -1` url_parts=(`echo ${stream_url} | perl -pe \u0026#39;s!^(.*)://(.*?)/(.*)/(.*?)$/!$1://$2 $3 $4!\u0026#39;`) rm -f ${channel_file} # # rtmpdump and mplayer # rtmpdump -v \\  -r ${url_parts[0]} \\  --app ${url_parts[1]} \\  --playpath ${url_parts[2]} \\  -W $playerurl \\  -C S:\u0026#34;\u0026#34; -C S:\u0026#34;\u0026#34; -C S:\u0026#34;\u0026#34; -C S:$authtoken \\  --live\\  | mplayer -   ","permalink":"https://hkaji.github.io/blog/raspi/21_radiko/","tags":["pi2b","radiko"],"title":"2年目のラズパイ...11日目...radikoでラジオ"},{"categories":["raspi"],"contents":"MicroPythonは、無事動いてくれました。 ソースコードを綺麗に整形して表示できるように、GitHubも勉強してアカウントを作成し、使い方を覚えました。\nLチカの状況を動画でblogへ張るため、動画編集ソフトを自宅のWindowsマシンにインストールし、スマホで撮った動画を編集しました。 非力なマシンなので結構つらいものがあります。YouTubeページで少し前までは編集できたようですが、サービス終了とのこと。\n今回は、blogの中身薄いですが手間は結構かかってます。\n定番の「Lチカ」IO4ポートに抵抗入りLEDを接続。\n1 2 3 4 5 6 7 8 9 10  import machine import time pin = machine.Pin(4, machine.Pin.OUT) # 最初の引数がPin番号 for i in range(10): pin.value(0) time.sleep(0.1) pin.value(1) time.sleep(0.1)   LEDをPWMにて明るさ制御する(俗称「Lモア」)\n1 2 3 4 5 6 7 8 9 10 11 12 13  import time import machine pwm = machine.PWM(machine.Pin(4)) # この数字が出力Pin番号 pwm.freq(60) while True: for i in range(1024): pwm.duty(i) time.sleep(0.001) for i in range(1023, -1, -1): pwm.duty(i) time.sleep(0.001)   状況の動画です。LチカからのLモア(手ブレあり)です。     あとは、 ちょっと脱線して、小さいLCDへの出力です。\n●aqm1602y-rn-gbw python\nhttp://www.takunoko.com/blog/aqm1602xa-rn-gbw%E3%82%92raspberry-pi%E3%81%A7%E4%BD%BF%E3%81%86/ http://kaizou55.blog84.fc2.com/blog-entry-5.html\n今回は間に合いそうにないので、また次回に。\n","permalink":"https://hkaji.github.io/blog/raspi/20_espwroom/","tags":["esp_wroom","MicroPython","GitHub"],"title":"2年目のラズパイ...10日目（ESP-WROOM-2)...python,LCD"},{"categories":["raspi"],"contents":"ちょくちょく配線をすすめて、ようやく準備が整いました。\nスイッチ2つはRSTと書き込みモードのためです。\n  ARDUINO IDEでESP-WROOM-2に接続する http://kohacraft.com/archives/1069194073.htmlx\n  TeraTermで接続する https://www.petitmonte.com/robot/esp_wroom_02_at_command.html\n  配線完了。 \r\r最初は、シリアルモニターから「AT」と叩いても、うんともすんとも言いませんでした。 コーヒーを飲んで、気分一新し新しい視点で見直すとなんだ「Tx,Rxの配線が逆じゃないの」、Tx→Tx,Rx→Rxと接続してました。\nそれを直すとすんなりとATコマンドの返信が戻ってきました。よっしゃ。 これで、シリアル経由でESP－WROOM-2にアクセスしているところまでは 確認できました。\n次は、MicroPython化です。 https://15jamrecipe.jimdo.com/mixjuice/%E3%83%95%E3%82%A1%E3%83%BC%E3%83%A0%E3%82%A6%E3%82%A7%E3%82%A2%E3%81%AE%E6%9B%B4%E6%96%B0/\n  Windowsからbinを書き込むツール https://www.espressif.com/en/support/download/other-tools?keys=\u0026amp;field_type_tid%5B%5D=14\n  MicroPythonのバイナリー http://micropython.org/download\n  書き込みモードの話 http://blog.bluedeer.net/archives/109\n  micropythonのバイナリーを書き込みツールで書き込んでみる。 \r\r\r\rちゃんとfinishして、書き込まれているようです。 \r\rコマンドラインにもuploadとなにやら表示されます。\n再度、リセットしてシリアル叩いてみますが、反応ありません。 うーん。今週は、ここまで。\n次回は、MicroPythonをなんとしても動かすですね。\n","permalink":"https://hkaji.github.io/blog/raspi/19_espwroom/","tags":["esp_wroom","FT232RL","MicroPython"],"title":"2年目のラズパイ...9日目(ESP-WROOM-2)"},{"categories":["raspi"],"contents":"ブレッドボードが小さいので、大きいほうに入れ替えます。今日は、USB-Serial変換器の電源周りとシリアル機能を確認します。\nUSB-Serial変換器のドライバーの話 こちらを参考にします1。\nUSB-Serial変換器ですが、Win7にドライバーが必要なのでインストール。 COM6にて認識してます。\nまずは電源周りを確認します。USBバスから出てくる5Vです。 LED直結ですが、最近は抵抗入りという便利なものがあります。これも抵抗入りです。 \r\r3端子レギュレーターで5Vを3.3Vにした出力の確認。 \r\rこちらも、問題ありません。 シリアルは、TxとRｘを接続します。 \r\r写真手前側の黄色いラインでTxとRxを接続してます。 あとは、TeraTermでキーボード入力した文字が表示されれば機能確認はOKです。 \r\rちゃんと入力した文字が表示されます。\nここまでで事前準備はOKです。電源周りの5Vと3.3Vの確認。シリアル機能の確認ができています。 ハード系は地道に確認していかないと不具合が発生してからどこが悪いというのを後から調べるのは大変です。 部品外したり、線を切ったりとしないといけなくなるので、できたところ毎に確認して進めたほうが手戻りは少ないです。\n参考リンク   参考リンク1\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://hkaji.github.io/blog/raspi/17_espwroom/","tags":["esp_wroom","bme280","3端子レギュレーター"],"title":"2年目のラズパイ...7日目(ESP-WROOM-2) "},{"categories":["raspi"],"contents":"USBケーブルを間違えて購入し、先週は進みませんでしたが、よくよく確認してmini-bケーブルを入手しました。\nまずは先人の知恵をよく調べます12。\n要点をまとめると\n ESP-WROOM-2は3.3V駆動、結構電力が必要。RL232の3.3V端子では電流が足りない USB給電の5Vを3端子レギュレータを使って3.3VにしてESPへ給電する ESP-WROOM-02には、書き込みモード、実行モード、SDブートモードがある  まずは、電源ラインから、 USB給電の5Vを取り出しレギュレータに入れて3.3VにしてESPに給電します。 レギュレータはJRC製のNJU7223F33を使用します。ピンは、向かって左から1.Vout,2.Vin,3.GNDです。 ノイズ対策のためVinには積層セラミックコンデンサー10μF、出力電圧安定化のためVoutには電解コンデンサー470μFを接続します。\nまずはこんな感じで \r\rGNDの配線をします。 \r\rデータシートと現物見ながらやってると疲れます。やっぱり配線図作成してから一気に配線したほうが楽だし間違わない感じですね。\n家にいるといろいろと割込みが入り、今日はここまでです。\n参考リンク   参考リンク1\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 参考リンク2\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://hkaji.github.io/blog/raspi/16_espwroom/","tags":["esp_wroom","bme280"],"title":"2年目のラズパイ...6日目(ESP-WROOM-2)"},{"categories":["raspi"],"contents":"ラズパイからちょっと離れてWi-FiモジュールESP-WROOM-2としばらく戯れます。 それぞれのデータシートはこちら（ESP-WROOM-02、FT232RL）\nまずは、足とジャンパーにピンヘッダーを半田付けします。\nWi－Fiモジュールはこちら。銀色のデバイス左側がWi-Fiのアンテナです。 \r\rUSB-シリアル変換はこちら。USBは、ミニBでした。買ったケーブルはマイクロB（涙）。確認したつもりでしたが。 \r\rブレッドボードに刺した全体はこちら。 \r\r10円と比較してますが、それぞれ非常に小さなデバイスです。\n","permalink":"https://hkaji.github.io/blog/raspi/15_espwroom/","tags":["esp_wroom","bme280"],"title":"2年目のラズパイ...5日目(ESP-WROOM-2)"},{"categories":["raspi"],"contents":"ラズパイ＋センサー＋クラウドは、前回までで終了しました。\n1週間ほど経ちましたが、問題なく稼働中です。グラフは横軸1メモリ/日です。夕方気温のピークがきて朝方に向かって下がってます。この一週間は日に日に気温のピークが上がってましたが、昨日夕方から急に気温も湿度も下がり過ごしやすい環境です。 \r\rラズパイは商用運用中なので突発停電対策はしておかないと、また痛い目にあいます。 モバイルバッテリーで充電と放電を無瞬断でやってくれる優れものがあるそうなので、ただいま探索中です。\n先週は、 秋月にいっていろいろ買いこんできました。 \r\r2年前から寝かしていたESP-WROOM-2、Wi-Fiモジュール付です。マイコンとWi-Fiモジュール、アンテナが付いて650円です。技適も取っているので、電波法違反にもなりません。 \r\rラズパイからちょっと離れて、今日からこれにセンサーをつけてクラウド連携させたいと思います。\nハード的には、USB-シリアル変換経由でこいつにアクセスします。ソフトウェアはデフォルトでATコマンドに反応するマイコンが入っています。この部分にmicropythonを送り込むとライトなpythonが動くようなので、そこまでいきたいと思います。\n","permalink":"https://hkaji.github.io/blog/raspi/14_wroom/","tags":["esp8226","bme280"],"title":"2年ぶりのラズパイ...4日目"},{"categories":["raspi"],"contents":"GW中に終らせようと思っていましたが、そうはいかず。 週末を中心に更新します。\n今日は、AmbientというIoT専用のクラウドサーバーに、ラズパイからセンサーデーターをアップすることについて頑張ります。\n以下がambientのトップページ。無料で使えます。 ambient top\nクラウドとのやり取りをするpython libをインストール ambient python lib:GitHub\nまずは、ambientのアカウントを作成します。 メールにWebでの認証リンクが送付されクリックするとアカウント作成完了です。 次は、チャンネルの作成。IoT機器との入出力口になるらしい。4桁のIDです。 同時に、送信用と受信用の鍵が作成されます。\n先ほどのチャンネルIDと送信用鍵の組み合わせで、ポートの認証を行っているようだ。 画面はこんな感じ。 \r\rGoogle共通言語のpythonも勉強しつつ、サンプルコードを修正してデーターをクラウドに送信することができました。\nこれまでperlとは戯れていたので、pythonはお作法がわかれば取り組みやすいです。 コード表現の自由度を排除して、誰が書いても同じ動作をするということが狙いだそうで。文末に「;」を打たないとか、インデントは4文字等々慣れるととっつきやすいです。\nラズパイに接続しているBME280センサーから、温度、湿度、気圧を読み出して、Ambientに送信します。cronで1分毎にデータを送信。 クラウド側で送信データーにタイムスタンプを打って、保存してくれます。 データーは、1度に8個まで送れます。 \r\rグラフの作成は、WWW上でパラメーター等を設定すれば勝手に表示されます。データがアップデートされるとグラフも自動更新。\nということで、センサーデータをラズパイで読み取り、クラウドに送信するまではできるようになりました。\nラズパイのバックアップを取って、しばらくはデータの送信を続けてみます。\n今後はPi zeroとか違うマイコンとの接続、アップしたデーターを読み取って加工するなどを考えてみます。\n","permalink":"https://hkaji.github.io/blog/raspi/13_ambient2/","tags":["pi2b","ambient","bme280"],"title":"2年ぶりのラズパイ...3日目"},{"categories":["raspi"],"contents":"クラウドはAWS1年間無料なので、がんばってみようかと思いましたが、AmbientというIoT専用のクラウドを個人で運用されている人が居ます。 簡単そうなので、そちらで試してみます。\n久しぶりなので写真も。\nラズパイ本体（確かpi2b+です） \r\rBME280センサー（小さい、緑色の基盤の真ん中銀色の部分がセンサーです） \r\rデーターシート(pdfファイルへのリンク) \r\r\r\rラズパイとセンサーの接続状況(ラズパイ側1本pin間違っている状態) \r\rその前に今回はラズパイに温度湿度センサー接続し、読み取れるように設定です。\n★ラズパイGPIO番号と端子位置 参考リンク\n★ラズパイでSPI通信の準備 参考リンク\n★ラズパイI2CでBME280と接続 参考リンク\n★BME230をPythonで読み出す 参考リンク 参考リンク 参考リンク 参考リンク\nこんな感じでI2C経由BME280を認識できました。なかなか認識できなかったのですが、本体側のGPIOピンの接続が1本ずれてました。\n【反省】「適切に接続したつもり」という思い込みは駄目。ピンヘッダー真上から見ると一目瞭然。ハードウェアは何度も目線を変えて目視確認が重要。\n1 2 3 4 5 6 7 8 9 10 11  pi@raspberrypi:~ $ i2cdetect -y 1 0 1 2 3 4 5 6 7 8 9 a b c d e f 00: -- -- -- -- -- -- -- -- -- -- -- -- -- 10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 70: -- -- -- -- -- -- 76 -- pi@raspberrypi:~ $   スイッチサイセンスさんがpythonスクリプトを公開しています。\n1 2 3  $ git clone https://github.com/SWITCHSCIENCE/BME280.git $ cd BME280/Python27/ $ python bme280_sample.py   これではsmbus2というモジュールがないと言うことでインストール。\n★smbus2のインストール\n1 2 3 4 5  $wget https://github.com/kplindegaard/smbus2/archive/master.zip $unzip master.zip.1 $cd smbus2-master $sudo pip install smbus2   これでエラーはなくなりました。\n1 2 3 4 5  $pi@raspberrypi:~/BME280/Python27 $ python bme280_sample.py $temp : 23.94 ℃ $pressure : 1006.75 hPa $hum : 46.24 ％ $pi@raspberrypi:~/BME280/Python27 $   ちゃんと温度に湿度、気圧の値をセンサーから取得することができました。\nその後、1分毎に計測してファイルに書き出し、昔ながらの（今は使わないらしい） gnuplotでグラフにしてみました。\nセンサーはちゃんと動いて、ラズパイで読みと取れているようです。 \r\r","permalink":"https://hkaji.github.io/blog/raspi/12_ambient/","tags":["pi2b","ambient","bme280"],"title":"2年ぶりのラズパイ...2日目"},{"categories":["raspi"],"contents":"2年ほどお休みだったラズパイを起こすために、OSを入れ直しです。\nNOOBSのバージョンも2.8.1に上がってます。ファイルの大きさは1.7GB。でかい。 ダウンロードに20分ほどかかりました。 当時は、バージョン1.4だったような。 この間、ラズパイ3,3+,zero等ハードもいろいろと出たので、それに対応していったのでしょう。 小さいzeroは、ちょっと気になります。\nSDカードへの書き込みや初期設定等はこちら123を参考にしました。\nパッケージの更新とOSの更新 1 2 3 4  $ sudo apt-get update # パッケージリストの更新  $ sudo apt-get upgrade # パッケージの更新 $ sudo apt-get dist-upgrade # OSのアップグレード   ファームの更新 1 2 3 4  $ sudo apt-get install rpi-update # インストール $ sudo rpi-update # 更新実行 $ sudo reboot # 反映のための再起動    日本語フォントとターミナル 1 2 3 4  $sudo apt-get install ttf-kochi-gothic xfonts-intl-japanese xfonts-intl-japanese-big xfonts-kaname $sudo apt-get install uim uim-anthy $sudo apt-get install jfbterm   まずはこの辺までで。\n前回の反省を生かしてSDカードはこの時点でバックアップしておきます。 8GBのイメージファイルwindows側にできます。 日付とバージョンをファイル名につけておけば、どの時点でのバックアップかはある程度推測できるでしょう4。\n参考リンク   http://deviceplus.jp/hobby/raspberrypi_entry_003/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n https://qiita.com/kanaisawa/items/4723f72a28084263ae1f\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n https://qiita.com/HeRo/items/c1c30d7267faeb304538\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n http://www.moonmile.net/blog/archives/6878\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://hkaji.github.io/blog/raspi/11_restart/","tags":["pi2b"],"title":"2年ぶりのラズパイ...1日目"},{"categories":["raspi"],"contents":"調子よかったraspbianでしたが、連続運用20日で記録が止まり、その後何度再起動しても1週間と持ちません。\nsyslogにもカードデバイスがどうのこうのとあったので、SDカードの問題と判断し新しいの購入しました。 \r\rFigure . esp-wroom-02\r\r\r\r左が秋月で本体とセットで買った無名ブランド。 右がclass10の新しいもの。\nさてその違いは、現れるのか。\nそれとも、file systemが壊れているのか。吸い出して、書き込んでみましょう。\n1か月ほど寝込んでましたが、ちょっと元気になってきたのでラズパイ日記も再開です。\n","permalink":"https://hkaji.github.io/blog/raspi/07_raspi/","tags":["pi2b"],"title":"ラズパイ日記...7日目"},{"categories":["raspi"],"contents":"久しぶりに更新です。\n夏休みの宿題後調子よく動いていたのですが、止まりだしたら調子悪いです。 muninで機器の各種ステータスも記録してます。\nuptimeが連続20日でパタッと不調です。 とくにkernel panicで落ちるわけではないのですが、各種プロセスが動かない状況です。 logを調べてみるとなにやらSDカードのアクセスができなくなってるようです。はずれなのか。何度か抜き差しして再起動。 しばらく様子見です。 \r\rFigure . munin\r\r\r\rこのように気温の記録も飛び飛びです。 \r\rFigure 1. rht03 temp\r\r\r\r新しいセンサーも購入。この小ささで、温度と湿度、気圧まで同時に計れる優れものです。接続はI2C,SPIいずれもOKだそうです。 \r\rFigure 2. bme280\r\r\r\r比較するものがありませんが、基盤は15mm×10mmの大きさです。 \r\rFigure 3. bme280\r\r\r\r師匠オススメのWiFiモジュール技適済み。合法的にWiFiオンしてもいいそうです。マイコンとWiFiモジュールがSoCになっており、なんとArduinoのIDEで中身はプログラムできます。変換基盤も付いてこの値段。こちらもそのうちに。 \r\rFigure 4. esp-wroom-02\r\r\r\r","permalink":"https://hkaji.github.io/blog/raspi/06_raspi/","tags":["pi2b"],"title":"ラズパイ日記...6日目"},{"categories":["raspi"],"contents":"とくに新しい進展はありません。 温度湿度センサーは、いい感じで5分おきにデータを取って、muninnがグラフ化してくれてます。\n今後は、温度と湿度に加えて、気圧と照度センサーを加えて、さらに部屋の中数箇所で測定できるように発展させたいと思います。\nWWWを眺めていてもラズパイネタは、へ～といろんな分野に分かれて発展してます。\nちょっと本屋で雑誌売り場を眺めていたいたところ先月、今月それぞれの雑誌が「ラズパイ」特集でした。 最近雑誌はめったに買わないのですが、思わず買ってしまいました。 \r\rFigure . トラ技\r\r\r\r","permalink":"https://hkaji.github.io/blog/raspi/055_raspi/","tags":["pi2b"],"title":"ラズパイ日記...小休止"},{"categories":["raspi"],"contents":"夏休みの宿題は、引き続き調子よく稼働中です。\n部屋の温度湿度1週間の状況です。エアコンをつけると湿度下がる状況がよくわかります。 \r\rFigure . munin\r\r\r\rラズパイにArduinoIDEをインストールすると。 X window上にスケッチエディターがWindowsと同じように出てきます。 \r\rFigure 1. ArduinoIDE\r\r\r\rラズパイ→Arduino→LEDと接続してLチカ試してみました。 \r\rFigure 2. ArduinoLED\r\r\r\rWindows版と同じようにスケッチ描いてビルドして転送するとArduinoは問題なく動いてくれます。USBシリアルも自動認識でした。\nさらにinoというArduino CLI版開発環境があるそうです。emacsでスケッチ描いて、コマンドラインでビルドできるそうです。こちらは、そのうち確認してみます。 \r\rFigure 3. ArduinoIDE\r\r\r\r","permalink":"https://hkaji.github.io/blog/raspi/05_raspi/","tags":["pi2b"],"title":"ラズパイ日記...5日目"},{"categories":["raspi"],"contents":"そろそろ夏休みも終わり。宿題終わらせないと。 なんとか目標まではたどり着きました。\n雑誌で読むのと実際にやってみるのは大違いで、先人の知恵を拝借しつつも結構手間かかることを実感しました。引き続き他のこともやってみたいと思います。\n今年の宿題は「ラズパイで温度センサーの値を読み取って、WWWで記録すること」としました。 昨日までに\n ラズパイのインストールと基本的な操作になれる debian系コマンドに慣れる デジタル温度センサーの値をGPIO経由で読み取る Arduinoで温度センサーの不良はないことを確認  というところまでは確認した。\n今日は、ラズパイでデジタル温度センサーの読み取りと読んだ値をWWWで記録すること。\nラズパイからGPIOに接続したデジタル温度センサーを読み取るには\n python経由　http://category7.blog.fc2.com/blog-entry-187.html WiringPiパッケージ経由 lolなんとかいうライブラリ  の3種類が調べたところ先人の知恵でした。それぞれ試した結果、 今回はWiringPi経由で読むことにしました。\n メモ  http://dorara.net/1088.html\nhttp://blog.bnikka.com/raspberrypi/am2302dht22raspberrypi.html\nhttp://qiita.com/zembutsu/items/0f8e570c4016ddb4aefa\n読み出しを確認したところでWWWでの記録に。 先人の知恵でWWWサーバにはnginx、グラフ化ソフトにはmuninを使用します。\n muninメモ  http://qiita.com/zembutsu/items/0f8e570c4016ddb4aefa\nnginxのインストールはapt-get一発で終了。 muninは、いろいろと設定ファイルを書かないといけません。GPIOを読み出すにはrootで読み出しスクリプトを動かさないといけないのでちょっと工夫が必要です。\n最終的にはラズパイのGPIOにデジタル温度湿度センサー（型番RHT03）を接続。データ線は、10kΩの抵抗でプルアップ。 \r\rFigure . rht03\r\r\r\rlolライブラリーでセンサー出力を読み出しているところ。 \r\rFigure 1. rht03\r\r\r\rmuninのupdateログ。5分ごとにcronからよばれて処理してグラフを書いてます。muninの処理はperlで書かれていますので10秒ほどかかります。 \r\rFigure 2. munin\r\r\r\rこんな感じで5分ごとの温度と湿度を記録してくれました。 \r\rFigure 3. munin\r\r\r\r","permalink":"https://hkaji.github.io/blog/raspi/04_raspi/","tags":["pi2b"],"title":"ラズパイ日記...4日目"},{"categories":["raspi"],"contents":"アナログセンサーは諦めて、今日は時間があるので秋葉原へゴー。\n メモ  http://category7.blog.fc2.com/blog-entry-187.html\n Arduino  http://fritzing.org/home/\n猛暑日の秋葉原駅の昼過ぎ。あつ～。 \r\rFigure . Akihabara\r\r\r\r暑い昼間に秋月電子の前についたら寂しい看板。 そうならそうといってよ。 お店のWWWにはお知らせがありました。 \r\rFigure 1. Akizuki\r\r\r\r気を取り直してお隣の千石さんへ。 デジタルセンサー、プルアップ用の抵抗、配線用のジャンパーを購入。 \r\rFigure 2. 買物\r\r\r\rラズパイで読めている先人がいるこのセンサーを購入。精度は悪いらしい。 \r\rFigure 3. sensor\r\r\r\rラズパイにつないで、サンプルプログラムで読んでみたが読み取れない。 センサーの不良なのか、配線が悪いのか、プログラムの問題か。 \r\rFigure 4. pi2b\u0026#43;sensor\r\r\r\rArduinoを引っ張り出してきて、ちゃちゃっと配線。Vccは3.3Vで。 \r\rFigure 5. Arduino\r\r\r\r久しぶりにArduinoIDEをインストールして、スケッチファイルを確認してバイナリーをArduinoへ転送。 \r\rFigure 6. ArduinoIDE\r\r\r\r問題なくそれなりの温度と湿度の値を表示。センサーは問題ないようだ。 ここまで確認して再度ラズパイへ。 \r\rFigure 7. ArduinoIDE\r\r\r\r","permalink":"https://hkaji.github.io/blog/raspi/035_raspi/","tags":["pi2b"],"title":"ラズパイ日記...3.5日目"},{"categories":["raspi"],"contents":"もう3日目。 そろそろ本体設定や使い方にはなれてセンサーの読み込みのための設定に移ります。 と、思ったけどちょっと休憩です。\nまずはおまじない  /boot/config.txt dtparam=i2c_arm=on　があるのか確認。 /etc/modules i2c-dev を追記 i2c関連コマンドのインストール　sudo apt-get install i2c-tools  そうだよね さてセンサー周りとラズパイのI/Oを調べていくうちに。 ラズパイは、I2CもしくはSPIにてI/Oできる。でもこれってどちらもデジタル。\narduino感覚でアナログ入力もあると思い込んでいたらそれはなし。\nそうだよね。PCで直接アナログ入力って一度A/Dしてから取り込みだよね。と、いまさら納得。 温度センサー→arduino→RaspberryPi　も頭に浮かんだけど深みにはまりそうなので次回に。 とりあえず、SPIかI2Cで読めるセンサーを購入しましょう。 Analog sensorAnalog sensor 購入した温度センサーはこれ。 210円と安いのでまぁいいかと。\n\r\r\rFigure . Analog sensor\r\r\r\r\r\rFigure 1. Analog sensor\r\r\r\r配線はこの2線。どっちがGNDかなとふと思っていましたが、温度によって 抵抗値が変わるセンサー。 流れる電流か電圧とA/Dしないとpi2bに読み込めません。\n","permalink":"https://hkaji.github.io/blog/raspi/03_raspi/","tags":["pi2b"],"title":"ラズパイ日記...3日目"},{"categories":["raspi"],"contents":"Rasbianのインストールと起動までは確認しました。 ちっちゃいのにX window動くしたいしたものです。\n\r\rFigure . install\r\r\r\r今日は、小さい本体だけど以下のケーブルが刺さってます。\n USB（電源用） HDMI USB（キーボード） USB（マウス） RJ-45（有線ネットワーク）  ということで1は抜けませんが、無線LANで接続できると他の線は抜けるので、今日は無線LANの設定です。\n\r\rFigure 1. WiFi\r\r\r\r消費電力が小さく熱くならないという先駆者の知恵を拝借してこちらを購入。\n ELECOM　WDC-150SU2MWH IEEE802.11b/g/n  に対応で最大150Mbpsというスペック。\n近くのノジマで1,200円くらいでした。\n★参考メモ\nhttp://kenken4320.hatenadiary.jp/entry/2014/06/29/233034\n","permalink":"https://hkaji.github.io/blog/raspi/02_raspi/","tags":["pi2b"],"title":"ラズパイ日記...2日目"},{"categories":["raspi"],"contents":"久しぶりにこのページを更新。 本日より「ラズパイ日記」を掲載。 お父さんの2015年夏休み自由研究ということで。さて、どこまでたどり着くのか。\n早速ラズベリーパイ2を千石通商に発注。16時までに決済又は注文+入金が完了するとその日に発送してくれます。関東方面なら次の日に到着。 ケーブルや電源が入っているセットがあったのでそちらで。 あわせて温度センサーも発注。\nまずは単体でlinuxのRasbianが動くことを確認。 温度センサーの値を一定の間隔で読み込んで、補正してグラフ化。ネットワーク越しにスマホで確認できるまでを第一段階として夏の大人の自由研究にしておきます。 これまでRH系はさわったことあったのですが、debian系ということで勝手が違い調べながら進んでます。\nさて夏休み終わるまでに自由研究終わるのか最後の日にジタバタするのかは今後の進展ということで。\n\u0026mdash;- 設定memo ★パッケージの更新\n1 2  sudo apt-get update sudo apt-get upgrade   遠足のおやつのように透明な袋に梱包されてます。 \r\rFigure . 梱包\r\r\r\r中身はこんな感じです。 \r\rFigure 1. 中身\r\r\r\r本体はこんな大きさです。500mlのペットボトルと比較。 \r\rFigure 2. 大きさ\r\r\r\r付属のケースに挿入。ピンセットとか小さなドライバーが必要です。 \r\rFigure 3. install\r\r\r\r買ったメモリーはOSイメージインストール済みなので、電源入れると「rasbianインストールしますか？」といきなり表示。 \r\rFigure 4. install\r\r\r\r「install」クリックするとSDカード内にファイルイメージが展開されます。10分程度かかります。 \r\rFigure 5. install\r\r\r\rファンレスのため、一切音がありません。メモリーカード読み書きするとLEDがちかちかします \r\rFigure 6. fan less\r\r\r\rメモリーへのインストールが終わると再起動がかかり、OSが立ち上がります。 \r\rFigure 7. fan less\r\r\r\r今日はここまで、あとは設定ですね。\n","permalink":"https://hkaji.github.io/blog/raspi/01_raspi/","tags":["pi2b"],"title":"ラズパイ日記...1日目"}]